<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>位移平台程序应当满足的功能</title>
    <url>/2023/01/16/3Dmover/3Dmove1/</url>
    <content><![CDATA[<h2 id="程序功能"><a href="#程序功能" class="headerlink" title="程序功能"></a>程序功能</h2><p>预想中的程序应该实现以下几个功能:</p>
<ol>
<li>对路径的规划:获得带测量点,<em>避免和已有待测物体发生撞车</em>,<em>智能更新测量点</em>(类似于绘制函数的时候梯度变化大的点多,梯度变化小的点少)</li>
<li>移动命令的执行:<del>与grbl进行通讯实现移动(通过传输GCode的方式),实时获知位置</del>,获知出现撞车或者达到极限等状况,自定义原点</li>
<li>数据的获取与处理:<del>原始数据获取(厂家有提供库)</del>,<em>数据不确定度估算与定标</em>(需要结合技术手册以及探头设计进一步研究)</li>
<li>中央控制程序:<del>将电机等的状态显示出来</del>,3D显示路径以及测量结果</li>
</ol>
<h2 id="为何不使用如kliment这样的程序"><a href="#为何不使用如kliment这样的程序" class="headerlink" title="为何不使用如kliment这样的程序"></a>为何不使用如kliment这样的程序</h2><p>因为<code>kliment</code>是设计给3D打印机而非我们所使用的测量装置的</p>
<p>其优点有:</p>
<ol>
<li>具有较为完善的各种错误的处理功能(但是grbl不支持)</li>
<li>界面比较漂亮</li>
<li>支持stl文件的导入等</li>
</ol>
<p>但是我目前已经实现了gcode的传输以及实时的位置获取,<code>klimenr</code>可以为未来改进自定义原点或检查异常情况提供灵感,但是没有必要依赖其实现</p>
<p>主要原因在于<code>klimenr</code>缺乏开发文档,研究其源码会非常困难,并且其完全依赖于下位机的gcode功能(例如温度获取),但是对于我们现在的目标这么做并不切合实际.那么这样会导致可能存在解析gcode的”中间商”,将问题弄得过于复杂.</p>
<p>我的观点在于目前几个部分的模块分别开发(目前已经实现了一个可以控制grbl移动以及控制AD卡读取数据的一个控制程序),剩余的部分自行开发(当然像处理3D模型这样的问题究竟是使用像VTK这样的工具还是像使用slicer这样的小型工具还有待研究)</p>
<p>而最后的图形界面(虽然现在有一个基于CUI的”伪”图形界面),这个的制作属于比较细枝末节的问题(甚至最后可以扔给Labview解决),我们现在就不考虑了</p>
]]></content>
      <categories>
        <category>3D位移测量平台设计</category>
      </categories>
      <tags>
        <tag>3D位移平台</tag>
        <tag>程序规划</tag>
      </tags>
  </entry>
  <entry>
    <title>处理3D模型</title>
    <url>/2023/01/16/3Dmover/3Dmoveslice/</url>
    <content><![CDATA[<p>为了实现通过用户给的3D模型实现避障功能的路径规划,我们采取首先对模型进行切片,然后再通过修改路径长度和两点之间路径获取的函数完成</p>
<h2 id="对于meshcut库的使用"><a href="#对于meshcut库的使用" class="headerlink" title="对于meshcut库的使用"></a>对于<code>meshcut</code>库的使用</h2><p>可以实现3D建模处理的库有很多,但如果仅仅是想要一个切面就将<code>vtk</code>搬出来未免就有一点大材小用了,通过寻找,我找到了一个<code>meshcut</code>库,其可以将<code>stl</code>文件和定义的平面求得交线.</p>
<p><a href="https://github.com/julienr/meshcut">meshcut库</a>的开发主页</p>
<p>下面是使用<code>meshcut</code>库实现对一个3D模型切割的效果图</p>
<p><img src="/2023/01/16/3Dmover/3Dmoveslice/42.png" alt="42"></p>
<p>而其所使用的源码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> stl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> meshcut</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_mesh</span>(<span class="params">m:stl.mesh.Mesh</span>):<span class="comment">#从stl文件中创建mesh</span></span><br><span class="line">    <span class="comment"># Flatten our vert array to Nx3 and generate corresponding faces array</span></span><br><span class="line">    verts = m.vectors.reshape(-<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    faces = np.arange(<span class="built_in">len</span>(verts)).reshape(-<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    verts, faces = meshcut.merge_close_vertices(verts, faces)</span><br><span class="line">    <span class="keyword">return</span> meshcut.TriangleMesh(verts,faces)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    m=stl.mesh.Mesh.from_file(<span class="string">&quot;up.stl&quot;</span>)</span><br><span class="line">    mesh=create_mesh(m)</span><br><span class="line"></span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    z=<span class="number">1</span><span class="comment">#z坐标</span></span><br><span class="line">    <span class="keyword">while</span>(i!=<span class="number">0</span>):<span class="comment">#在没有交点是会报错,程序自动终止</span></span><br><span class="line">        plane_origin=np.array([<span class="number">0</span>,<span class="number">0</span>,z])</span><br><span class="line">        plane_n=np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">        plane=meshcut.Plane(plane_origin,plane_n)<span class="comment">#创建平面</span></span><br><span class="line"></span><br><span class="line">        p=meshcut.cross_section_mesh(mesh,plane)<span class="comment">#求解相交部分多边形</span></span><br><span class="line">        x=p[<span class="number">0</span>][:,<span class="number">0</span>]</span><br><span class="line">        x=np.hstack([x,np.array(x[<span class="number">0</span>])])</span><br><span class="line">        y=p[<span class="number">0</span>][:,<span class="number">1</span>]</span><br><span class="line">        y=np.hstack([y,np.array(y[<span class="number">0</span>])])</span><br><span class="line">        plt.plot(x,y)</span><br><span class="line">        plt.savefig(<span class="string">&quot;&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(z))</span><br><span class="line">        z=z+<span class="number">1</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h2 id="判断一条线是否与多边形相交"><a href="#判断一条线是否与多边形相交" class="headerlink" title="判断一条线是否与多边形相交"></a>判断一条线是否与多边形相交</h2><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>接下来我们来讨论一下关于碰撞检测这一部分的内容.</p>
<p>多边形是由有限个点首尾相连而成的,那么假如一条线段与多边形相交,那么其必然与多边形的至少一条边相交.因此问题就转化为<em>判断一条线段是否与一个线段集中线段相交</em>.</p>
<p>而对于判断两线段是否相交的方法,记第一条线段两点为$A_1,A_2$,第二条线段两点为$B_1,B_2$,如果从线段一指向线段二某点(通常使用某个端点)的两个矢量与线段二的叉乘异号,表明$A_1,A_2$分别位于第二条线段两侧.同理,可以判断$B_1,B_2$是否位于第一条线段两侧.如果两个条件同时满足,那么就可以说明线段相交.</p>
<p>这一手段<a href="https://blog.csdn.net/zhouzi2018/article/details/81871875">参考资料</a></p>
<blockquote>
<p>特殊情况,判断点是否在多边形内,可以用相似的方法,通过过该点做一条射线,然后统计相交点数,如果相交点数为偶数,则点在多边形内,否则在多边形外</p>
</blockquote>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>在实现这个问题的同时,需要考虑到Python在处理大量的<code>for</code>循环时效率非常低下,因此需要对操作进行向量化处理.</p>
<p>假定$A_x,A_y,B_x,B_y$为$n,n,m,m$维列向量,定义$C_{ij}$的值等于$A_{i}\times B_{j}$为行列式的值,根据线性代数相关知识,我们可以得到$C&#x3D;A_xB^T_y-A_yB_x^T$</p>
<blockquote>
<p>如此操作时需要注意对<code>array</code>进行<code>reshape</code></p>
</blockquote>
<p>下面展示了实现矢量集叉乘和判断线段集是否相交的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc_cross</span>(<span class="params">a: np.array, b: np.array</span>):</span><br><span class="line">        <span class="comment"># 计算两个二维向量集的叉乘</span></span><br><span class="line">        ax = a[:, <span class="number">0</span>].reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        ay = a[:, <span class="number">1</span>].reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        bx = b[:, <span class="number">0</span>].reshape(<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">        by = b[:, <span class="number">1</span>].reshape(<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> np.dot(ax, by)-np.dot(ay, bx)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_crossing</span>(<span class="params">lines1: np.array, lines2: np.array</span>):</span><br><span class="line">        begs1 = lines1[:, <span class="number">0</span>, :]</span><br><span class="line">        begs2 = lines2[:, <span class="number">0</span>, :]</span><br><span class="line">        ends1 = lines1[:, <span class="number">1</span>, :]</span><br><span class="line">        ends2 = lines2[:, <span class="number">1</span>, :]</span><br><span class="line">        l1 = ends1-begs1</span><br><span class="line">        l2 = ends2-begs2</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查线2是否分隔线1</span></span><br><span class="line">        v1 = begs2-begs1</span><br><span class="line">        v2 = begs2-ends1</span><br><span class="line">        c1 = calc_cross(v1, l2)</span><br><span class="line">        c2 = calc_cross(v2, l2)</span><br><span class="line">        c = c1*c2  <span class="comment"># 计算两矩阵各个元素相乘(比较同号异号)</span></span><br><span class="line">        bca = c &lt; <span class="number">0</span>  <span class="comment"># 分割线1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查线1是否分隔线2</span></span><br><span class="line">        v1 = begs1-begs2</span><br><span class="line">        v2 = begs1-ends2</span><br><span class="line">        c1 = calc_cross(v1, l1)</span><br><span class="line">        c2 = calc_cross(v2, l1)</span><br><span class="line">        c = c1*c2  <span class="comment"># 计算两矩阵各个元素相乘(比较同号异号)</span></span><br><span class="line">        bcb = c &lt; <span class="number">0</span>  <span class="comment"># 分割线2</span></span><br><span class="line"></span><br><span class="line">        bc = np.<span class="built_in">all</span>([bca, bcb], axis=<span class="number">0</span>)  <span class="comment"># 同时分割</span></span><br><span class="line">        <span class="keyword">return</span> bc  <span class="comment"># 第i行第j列元素判断lines1的第i根线与lines2的第j根线是否相交</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个时候我意识到了一个问题:在实际的移动过程中,z轴的移动无法控制,因此需要在路径规划的过程中对z轴进行单独处理</p>
<p>因此:在每一次移动时,首先移动z轴,然后就可以理解为平面内运动</p>
</blockquote>
]]></content>
      <categories>
        <category>3D位移测量平台设计</category>
      </categories>
      <tags>
        <tag>3D位移平台</tag>
        <tag>计算机图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>3D位移平台路径开发器记录1</title>
    <url>/2023/01/16/3Dmover/3Dmove2/</url>
    <content><![CDATA[<p>完成路径规划的<code>RoutePlanner</code>类,实现从点集(<code>datapoints</code>)到路径命令(<code>routecmd</code>)的转换</p>
<h3 id="使用算法"><a href="#使用算法" class="headerlink" title="使用算法"></a>使用算法</h3><p>使用的算法参考自<a href="https://zem12345678.github.io/2019/03/14/%E4%BD%BF%E7%94%A8%E8%BF%91%E4%BC%BC%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E6%97%85%E8%A1%8C%E5%95%86%EF%BC%88TSP%EF%BC%89%E9%97%AE%E9%A2%98">参考资料</a>,我们的问题是一个旅行商问题,因此没有一个多项式时间内可以实现的最优算法</p>
<p>但是我们需要注意到,我们所面临的图是一个完全图,并且近似满足三角不等式.因此可以使用最小生成树的方法得到近似解,其结果不会大于最优解的两倍</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>由于未来需要保留避障措施,但是避障之后的路径可以用一个新的路径代替,因此是通过<strong>修改路径获取函数实现</strong>(为未来预留接口)</p>
<blockquote>
<p>这样做可能导致三角不等式不成立,但是影响应该不大</p>
</blockquote>
<p><code>datapoints</code>属性在修改时会重新计算<code>route</code>,因此<em>不要频繁修改点集</em></p>
]]></content>
      <categories>
        <category>3D位移测量平台设计</category>
      </categories>
      <tags>
        <tag>3D位移平台</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>对控制驱动的改进</title>
    <url>/2023/01/17/3Dmover/new-motor-driver/</url>
    <content><![CDATA[<p>之前在制作控制程序的时候,有一些不够优雅的地方,今天决定对这些问题进行修正</p>
<h2 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h2><p>之前的工作是通过不断地询问实现的,我们要实现<strong>与串口交互的部分不断询问,而上层则是通过事件去驱动</strong>,这样可以极大程度简便工作流程,并且为未来处理碰撞等问题提供解决方案.</p>
<h3 id="对于电机"><a href="#对于电机" class="headerlink" title="对于电机"></a>对于电机</h3><p>电机输入一个<code>MoveControlCallbacksBase</code>,其中规定了三种可能的情况:状态更新,碰撞和坐标更新</p>
<blockquote>
<p>这些函数只有在值改变的时候才会调用</p>
</blockquote>
<p>这样的话<code>MoveControl</code>类只留下了一个接受命令并阻塞运行的<code>run</code>方法(在阻塞运行时,坐标会更新),并且保留了两个公开可修改属性</p>
<ol>
<li><code>refreshtime</code>:控制多久刷新一次坐标信息</li>
<li><code>feed_rate</code>:控制移动速度</li>
</ol>
<h3 id="对于控制器"><a href="#对于控制器" class="headerlink" title="对于控制器"></a>对于控制器</h3><p>计划将控制器的构造函数的参数<strong>不出现</strong>有关移动控制和测量控制的函数,这样可以保证更好的封装</p>
<p>然后和电机保持一样的<strong>回调控制方式</strong></p>
<p>对于控制器,则保留四种情况的回调:</p>
<ol>
<li><code>status_refresh_call</code>控制器状态刷新</li>
<li><code>coordinate_refresh_call</code>坐标状态刷新</li>
<li><code>measure_refresh_call</code>测量结果刷新</li>
<li><code>no_command_call</code>无后续命令</li>
</ol>
<p>并且保留了两个公开方法<code>add_cmd</code>和<code>change_motor_settings</code></p>
<p>属性中保留<code>cmd_list</code>进行读取待进行指令,<code>cmd_now</code>为当前执行指令</p>
<p>以及<code>move_start</code>控制是否开始测量</p>
<h2 id="测量驱动修改"><a href="#测量驱动修改" class="headerlink" title="测量驱动修改"></a>测量驱动修改</h2><p>应用了<code>MPS010602</code>,将相关文件打包成一个<code>weel</code>再安装,这个留到另外一篇文章讲</p>
]]></content>
      <categories>
        <category>3D位移测量平台设计</category>
      </categories>
      <tags>
        <tag>3D位移平台</tag>
        <tag>程序规划</tag>
      </tags>
  </entry>
  <entry>
    <title>The index blog</title>
    <url>/2023/01/15/Indexs/My-first-bolg/</url>
    <content><![CDATA[<p>This is the introduction and index of my blog, and it’s for testing the <code>Hexo</code>.</p>
<h2 id="My-plans-and-projects"><a href="#My-plans-and-projects" class="headerlink" title="My plans and projects"></a>My plans and projects</h2><p>This is the list of my plans and projects.</p>
<p>Some of them would be written in Chinese and some of them would be written in English(awful English).</p>
<ul>
<li><p>A magnetic field sensor based on a 3D printer(3D 位移平台)</p>
</li>
<li><p>Study the spectrum of maxi1820(maxi1820)</p>
</li>
<li><p>Make and improve a python library to process the uncertainty</p>
</li>
<li><p>Some other useful tools</p>
</li>
</ul>
<h2 id="My-study-plans"><a href="#My-study-plans" class="headerlink" title="My study plans"></a>My study plans</h2><p>Also, I need to learn some interesting thing, the list can be the index of my notes</p>
<ul>
<li><p>Controlling system with python(Python设计控制系统)</p>
</li>
<li><p>Machine learning(机器学习)</p>
</li>
<li><p>Analyzing X-ray spectrum from BH(X-ray spectrum)</p>
</li>
<li><p>Statics(统计学)</p>
</li>
</ul>
<h2 id="My-logs"><a href="#My-logs" class="headerlink" title="My logs"></a>My logs</h2><p>Sometimes there are interesting logs in my project and study, most of them may be about Python and Linux.</p>
]]></content>
      <tags>
        <tag>Index</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/01/17/Indexs/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>创建wheels</title>
    <url>/2023/01/19/MPS010602/make-wheel/</url>
    <content><![CDATA[<p>由于在开发3D位移平台时,需要使用到MPS010602,但是因为MPS010602是一个独立的项目(目前还在开发),因此正好学习一下如何打包为wheel库,以及其中遇到的一些问题</p>
<h2 id="源代码整理与-init-py"><a href="#源代码整理与-init-py" class="headerlink" title="源代码整理与__init__.py"></a>源代码整理与<code>__init__.py</code></h2><p>首先,我们要把源代码放置在一个文件夹中,并且需要有一个<code>__init__.py</code></p>
<p><code>__init__.py</code>应当如何编写,<a href="https://zhuanlan.zhihu.com/p/474874811">这篇文章</a>写得很清楚,可以去参考一下</p>
<p>目前我就采用最为简易的方式</p>
<p>如果目录结构是这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---MPS010602(import时所用的名称)</span><br><span class="line">  |-__init__.py</span><br><span class="line">  |-DriverOperator.py</span><br><span class="line">  |-MPSDataType.py</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>那么在<code>__init.py__</code>中,为了方便(不需要引用子文件名),可以这么写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from MPS010602.MPSDataType import *</span><br><span class="line">from MPS010602.DriverOperator import *</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要注意在两个源文件中如果出现了交叉引用,需要修改<code>import</code>格式</p>
</blockquote>
<h2 id="setup-py"><a href="#setup-py" class="headerlink" title="setup.py"></a><code>setup.py</code></h2><p>在放置代码的文件夹外,新建一个<code>setup.py</code>,然后填写以下内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line">setuptools.setup(</span><br><span class="line">    name=<span class="string">&#x27;mps010602&#x27;</span>,</span><br><span class="line">    version=<span class="string">&#x27;0.0.0&#x27;</span>,</span><br><span class="line">    description=<span class="string">&#x27;This is a program for MPS-010602&#x27;</span>,</span><br><span class="line">    author=<span class="string">&#x27;songyuli&#x27;</span>,</span><br><span class="line">    author_email=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    packages=setuptools.find_packages(),</span><br><span class="line">    package_data=&#123;<span class="string">&#x27;&#x27;</span>:[<span class="string">&#x27;*.dll&#x27;</span>],&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>其他部分都很简单,除了两个需要注意的地方:</p>
<ol>
<li>包名称和<code>import</code>时使用的名称不同</li>
<li><code>package_data</code>包含了你希望包含的除了源代码以外的内容(例如说使用的动态链接库)</li>
</ol>
<h2 id="构建与安装"><a href="#构建与安装" class="headerlink" title="构建与安装"></a>构建与安装</h2><p>在这一文件夹下,输入<code>python setup.py bdist_wheel</code>,之后在<code>dist</code>文件夹内可以看见编译好的<code>whl</code>文件,然后文件用<code>pip install</code>可以直接安装</p>
<blockquote>
<p>为了未来后续开发方便,建议一个环境开发,一个环境测试</p>
</blockquote>
<h2 id="其他的一些问题"><a href="#其他的一些问题" class="headerlink" title="其他的一些问题"></a>其他的一些问题</h2><p>我之前在引用动态链接库时遇到问题(因为工作目录发生改变)</p>
<p>因此获取自己当前的位置,可以通过<code>os.path.dirname(os.path.abspath(__file__))</code>访问当前所在文件夹</p>
]]></content>
      <categories>
        <category>MPS010602</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>对于数字信号处理的手段</title>
    <url>/2023/01/24/MPS010602/process-logical/</url>
    <content><![CDATA[<p>之前研究过对于<code>MPS010602</code>中的数字信号,应当如何处理(在其中使用二进制位来表示逻辑),今天恰好看到了<code>numpy.bitwise_xor</code>函数,会非常有用,在此记录一下</p>
<h2 id="逻辑位操作"><a href="#逻辑位操作" class="headerlink" title="逻辑位操作"></a>逻辑位操作</h2><p>在<code>numpy</code>库中有相应的逻辑操作函数,而最大的特点就在于它们可以实现向量化,这对于我们应用的场景来说非常重要.</p>
<p>其使用的方法与&amp;类似,主要看代码,以下代码展示如何从一个八进制数取出某一位的数字信号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_binary</span>(<span class="params">data_array:np.array,bit:<span class="built_in">int</span></span>):</span><br><span class="line">    check=<span class="number">1</span>&lt;&lt;bit</span><br><span class="line">    ca=np.array([check])</span><br><span class="line">    dataout=np.bitwise_and(data_array,ca)</span><br><span class="line">    <span class="keyword">return</span> np.where(dataout==<span class="number">0</span>,<span class="literal">False</span>,<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MPS010602</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>forbiddenfruit修改ndarray</title>
    <url>/2023/01/19/Pyerror/forbiddenfruit/</url>
    <content><![CDATA[<blockquote>
<p>请注意:在本文中包含了一些<strong>非常危险</strong>的行为,在使用前请务必三思</p>
</blockquote>
<h2 id="事情起因"><a href="#事情起因" class="headerlink" title="事情起因"></a>事情起因</h2><p>因为之前我做过一个处理误差的库的尝试,虽然构造了一个可以自动计算常见误差形式的类,然而这样一个类用在科学计算上的价值却不大,原因就在于这么做没法使用python中的常用数学计算库<code>numpy</code>,那么我就开始动起了歪脑筋:<em>是不是可以通过修改<code>np.ndarray</code>一些函数支持来实现我所想要的功能</em></p>
<p>就以<code>__add__</code>为例,我可以创建一个新函数去替代<code>__add__</code>以实现我的功能.</p>
<p>于是尝试了一下<code>np.ndarray.__add__=myadd</code>,很不幸,解释器告诉我</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TypeError: can&#x27;t set attributes of built-in/extension type &#x27;numpy.ndarray&#x27;</span><br></pre></td></tr></table></figure>

<p>我考虑了一下,发现原因是<code>numpy</code>不是由python编写的,因此也无法直接使用python修改动态类型的手段.</p>
<h2 id="解决-forbiddenfruit"><a href="#解决-forbiddenfruit" class="headerlink" title="解决:forbiddenfruit"></a>解决:<code>forbiddenfruit</code></h2><p>正在我表示绝望准备放弃的时候(原本准备用类继承实现功能),突然看到了<a href="https://zhuanlan.zhihu.com/p/345547458">一篇文章</a></p>
<p>在这篇文章,作者介绍了一个神奇又危险的库<code>forbiddenfruit</code>(<a href="https://pypi.org/project/forbiddenfruit/">下载地址</a>),在这个库里,你可以替换python内置的类型</p>
<blockquote>
<p>在文章中也介绍了修改内置类的工作原理,但是仍然无法解决运算符重载的问题</p>
<p>即<code>__add__</code>可以正常被替换,但是<code>+</code>就不行了</p>
</blockquote>
<p>那么下面我可以来演示一下如何替换掉python中list的加法方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> forbiddenfruit <span class="keyword">import</span> curse</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_list_add</span>():</span><br><span class="line">    old_add=<span class="built_in">list</span>.__add__<span class="comment">#保存原来加法实现</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">new_add</span>(<span class="params">self,o</span>):</span><br><span class="line">        <span class="keyword">return</span> old_add(old_add(self,[<span class="string">&quot; &quot;</span>]),o)<span class="comment">#新的加法</span></span><br><span class="line">    curse(<span class="built_in">list</span>,<span class="string">&quot;__add__&quot;</span>,new_add)<span class="comment">#替换掉原有加法</span></span><br><span class="line">change_list_add()</span><br></pre></td></tr></table></figure>

<p>然后未来进行列表加法时大家就会惊奇地发现列表两个元素之间总是会有一个空格</p>
<blockquote>
<p>在实际的生产中,这样的做法可能会导致暴力事件的发生</p>
<p>大家也可以试试在python大作业中用这个东西(吃C别怪我)</p>
</blockquote>
]]></content>
      <categories>
        <category>PyError</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>作死行为</tag>
      </tags>
  </entry>
  <entry>
    <title>poetry</title>
    <url>/2023/01/23/Pyerror/poetry/</url>
    <content><![CDATA[<h1 id="利用poetry进行包管理"><a href="#利用poetry进行包管理" class="headerlink" title="利用poetry进行包管理"></a>利用poetry进行包管理</h1><p>今天我突发奇想:</p>
]]></content>
  </entry>
  <entry>
    <title>The results and the problems in fitting the spectrum of the maxi1820+70</title>
    <url>/2023/01/15/maxi1820/maxi1/</url>
    <content><![CDATA[<h2 id="Fitting-points"><a href="#Fitting-points" class="headerlink" title="Fitting points"></a>Fitting points</h2><p>We chose three typical points from the HID graph.</p>
<p><img src="/2023/01/15/maxi1820/maxi1/hid.png" alt="hid"></p>
<h2 id="The-first-point"><a href="#The-first-point" class="headerlink" title="The first point"></a>The first point</h2><p>The first point is the observation is the three observation in <code>P14661084</code> and we use the low energy and mid energy part of the spectrum.</p>
<p>We combine the spectra in <code>P14661084</code> and use the model <code>constant*TBabs*(simplcutx*(diskbb+relxillCp)+xillverCp)</code>(The reason why I didn’t use the model <code>mbknpo</code> is that if I add this model, then the spectrum of the very low energy(about 2keV) may not fit well), and I got the best-fit like this.</p>
<p><img src="/2023/01/15/maxi1820/maxi1/fitLS.png" alt="fitLS"></p>
<p>Also, we calculate the error of each parameter, and got the table below</p>
<table>
<thead>
<tr>
<th>par</th>
<th>model</th>
<th>par name</th>
<th>value</th>
<th>range</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td><code>simplcutx</code></td>
<td><code>Gamma</code></td>
<td>2.32037</td>
<td>2.29367~2.34282</td>
</tr>
<tr>
<td>4</td>
<td><code>simplcutx</code></td>
<td><code>FracSctr</code></td>
<td>0.146214</td>
<td>0.139002~0.153343</td>
</tr>
<tr>
<td>6</td>
<td><code>simplcutx</code></td>
<td><code>kT_e</code></td>
<td>963.399</td>
<td>151.681~0(-811.624,-963.304)</td>
</tr>
<tr>
<td>7</td>
<td><code>diskbb</code></td>
<td><code>Tin</code></td>
<td>0.740488</td>
<td>0.737991~0.742486(-0.00249779,0.00199709)</td>
</tr>
<tr>
<td>8</td>
<td><code>diskbb</code></td>
<td><code>norm</code></td>
<td>1.53996E4</td>
<td>15170.5~15622(-229.123,222.451)</td>
</tr>
<tr>
<td>9</td>
<td><code>relxillCp</code></td>
<td><code>Index1</code></td>
<td>10.00000</td>
<td>9.20764~0(-0.792358,-10)</td>
</tr>
<tr>
<td>13</td>
<td><code>relxillCp</code></td>
<td><code>Incl</code></td>
<td>73.6178</td>
<td>72.3889~73.842(-1.22892,0.224224)</td>
</tr>
<tr>
<td>14</td>
<td><code>relxillCp</code></td>
<td><code>Rin</code></td>
<td>-1.01333</td>
<td>-1.03082~-1.00407(-0.0174862,0.00926662)</td>
</tr>
<tr>
<td>18</td>
<td><code>relxillCp</code></td>
<td><code>logxi</code></td>
<td>3.74057</td>
<td>3.61639~3.8515(-0.124187,0.110924)</td>
</tr>
<tr>
<td>19</td>
<td><code>relxillCp</code></td>
<td><code>Afe</code></td>
<td>10.0000</td>
<td>9.32562~0(-0.67438,-10)</td>
</tr>
<tr>
<td>22</td>
<td><code>relxillCp</code></td>
<td><code>norm</code></td>
<td>0.340764</td>
<td>0.29189~0.352971(-0.0488737,0.0122078)</td>
</tr>
<tr>
<td>30</td>
<td><code>xillverCp</code></td>
<td><code>norm</code></td>
<td>1.3216E-3</td>
<td>0~0.00371015(-0.00132301,0.00238714)</td>
</tr>
<tr>
<td>31</td>
<td><code>constant</code>(2)</td>
<td><code>factor</code></td>
<td>1.02040</td>
<td>1.01158~1.03362(-0.00881818,0.0132216)</td>
</tr>
</tbody></table>
<h2 id="The-second-point"><a href="#The-second-point" class="headerlink" title="The second point"></a>The second point</h2><p>The second point is the three observation in &#96;&#96;, we used all the energy part of the spectrum.</p>
<p>Also, we used the model <code>constant*TBabs*(simplcutx*(diskbb+relxillCp)+xillverCp)</code>to fit the spectrum. And ignored the spectrum between 21keV to 23keV. This time, however, we found that the model cannot fit the spectrum very well, especially at about Fe-line and at about 25 keV. </p>
<p>The unfolded spectrum and the ratio is like below:</p>
<p><img src="/2023/01/15/maxi1820/maxi1/fitLH.png" alt="fitLH"></p>
<p>We calculated the error of each parameter, and got the table below:</p>
<table>
<thead>
<tr>
<th>par</th>
<th>model</th>
<th>par name</th>
<th>value</th>
<th>range</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td><code>simplcutx</code></td>
<td><code>Gamma</code></td>
<td>1.55434</td>
<td>1.54259~1.56467(-0.0117559,0.0103268)</td>
</tr>
<tr>
<td>4</td>
<td><code>simplcutx</code></td>
<td><code>FracSctr</code></td>
<td>0.204196</td>
<td>0.187275~0.21611(-0.016921,0.0119141)</td>
</tr>
<tr>
<td>6</td>
<td><code>simplcutx</code></td>
<td><code>kT_e</code></td>
<td>50.2392</td>
<td>49.7608 ~52.4421(-0.47835,2.20294)</td>
</tr>
<tr>
<td>7</td>
<td><code>diskbb</code></td>
<td><code>Tin</code></td>
<td>0.530084</td>
<td>0.519304~0.546117(-0.0107803,0.0160332)</td>
</tr>
<tr>
<td>8</td>
<td><code>diskbb</code></td>
<td><code>norm</code></td>
<td>14927.14</td>
<td>4290.33~5755.6(-636.818,828.452)</td>
</tr>
<tr>
<td>9</td>
<td><code>relxillCp</code></td>
<td><code>Index1</code></td>
<td>10.00000</td>
<td>3.70664~0(-6.29336,-10)</td>
</tr>
<tr>
<td>13</td>
<td><code>relxillCp</code></td>
<td><code>Incl</code></td>
<td>41.5373</td>
<td>38.802~???(-2.73533,4.29916)</td>
</tr>
<tr>
<td>14</td>
<td><code>relxillCp</code></td>
<td><code>Rin</code></td>
<td>-14.5510</td>
<td>-18.111~-9.07362(-3.56002,5.47737)</td>
</tr>
<tr>
<td>18</td>
<td><code>relxillCp</code></td>
<td><code>logxi</code></td>
<td>4.40865</td>
<td>4.35113~4.44465(-0.057525,0.0360025)</td>
</tr>
<tr>
<td>19</td>
<td><code>relxillCp</code></td>
<td><code>Afe</code></td>
<td>9.29539</td>
<td>7.81846~0(-1.47693,-9.29539)</td>
</tr>
<tr>
<td>22</td>
<td><code>relxillCp</code></td>
<td><code>norm</code></td>
<td>8.8196E-2</td>
<td>0.0847278~ 0.0938056(-0.0034684,0.00560941)</td>
</tr>
<tr>
<td>30</td>
<td><code>xillverCp</code></td>
<td><code>norm</code></td>
<td>5.4875E-3</td>
<td>0.00463134~0.00628511(-0.000856129,0.000797643)</td>
</tr>
<tr>
<td>31</td>
<td><code>constant</code>(2)</td>
<td><code>factor</code></td>
<td>1.03591</td>
<td>1.02896~1.04286(-0.00695636,0.00694697)</td>
</tr>
<tr>
<td>61</td>
<td><code>constant</code>(2)</td>
<td><code>factor</code></td>
<td>1.05928</td>
<td>1.05126~1.06678(-0.00801573,0.00750175)</td>
</tr>
</tbody></table>
<p>I noticed that the range of the parameter <code>Rin</code>  is quite large, which may be related to the unfitted Fe-line.</p>
<h2 id="The-third-point"><a href="#The-third-point" class="headerlink" title="The third point"></a>The third point</h2><p>The second point is the two observation in <code>P0114661136</code>, we used all the energy part of the spectrum.</p>
<p>We use the model <code>constant*TBabs*(simplcutx*(diskbb+mbnkpo*relxillCp)+xillverCp)</code> to fit the spectrum. And ignored the spectrum between 21keV to 23keV. This time except the problem at about 20keV and 25keV, the model can fit the spectrum quite well.</p>
<p>The unfolded spectrum and the ratio is like below:<img src="/2023/01/15/maxi1820/maxi1/fit3.png" alt="fit3"></p>
<p>We calculated the error of each parameter, and got the table below:</p>
<table>
<thead>
<tr>
<th>par</th>
<th>model</th>
<th>par name</th>
<th>value</th>
<th>range</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td><code>simplcutx</code></td>
<td><code>Gamma</code></td>
<td>1.70835</td>
<td>1.69696~1.71736(-0.0113903,0.00900463)</td>
</tr>
<tr>
<td>4</td>
<td><code>simplcutx</code></td>
<td><code>FracSctr</code></td>
<td>0.423500</td>
<td>0.388402~0.452862 (-0.0350982,0.0293619)</td>
</tr>
<tr>
<td>6</td>
<td><code>simplcutx</code></td>
<td><code>kT_e</code></td>
<td>296.876</td>
<td>156.831~0(-140.045,-296.876)</td>
</tr>
<tr>
<td>7</td>
<td><code>diskbb</code></td>
<td><code>Tin</code></td>
<td>0.521368</td>
<td>0.499858~0.547507(-0.0215105,0.0261386)</td>
</tr>
<tr>
<td>8</td>
<td><code>diskbb</code></td>
<td><code>norm</code></td>
<td>1679.12</td>
<td>1315.87~2075.26(-363.28,396.115)</td>
</tr>
<tr>
<td>11</td>
<td><code>relxillCp</code></td>
<td><code>Index1</code></td>
<td>10.00000</td>
<td>4.04933~0 (-5.95067,-10)</td>
</tr>
<tr>
<td>15</td>
<td><code>relxillCp</code></td>
<td><code>Incl</code></td>
<td>44.0274</td>
<td>41.2731~48.205 (-2.75424,4.17761)</td>
</tr>
<tr>
<td>16</td>
<td><code>relxillCp</code></td>
<td><code>Rin</code></td>
<td>-4.37220</td>
<td>-5.43035 ~-3.03198 (-1.05815,1.34022)</td>
</tr>
<tr>
<td>20</td>
<td><code>relxillCp</code></td>
<td><code>logxi</code></td>
<td>3.64956</td>
<td>3.48269~3.80451(-0.166872,0.154944)</td>
</tr>
<tr>
<td>21</td>
<td><code>relxillCp</code></td>
<td><code>Afe</code></td>
<td>10.0000</td>
<td>7.14676~0 (-2.85324,-10)</td>
</tr>
<tr>
<td>24</td>
<td><code>relxillCp</code></td>
<td><code>norm</code></td>
<td>07.31228E-3</td>
<td>0.0061945~0.00893408(-0.00111789,0.00162169)</td>
</tr>
<tr>
<td>32</td>
<td><code>xillverCp</code></td>
<td><code>norm</code></td>
<td>2.39388E-11</td>
<td>0~0.000333344(-6.82725e-15,0.000333344)</td>
</tr>
<tr>
<td>33</td>
<td><code>constant</code>(2)</td>
<td><code>factor</code></td>
<td>1.00827</td>
<td>0.985256~1.02789 (-0.0230121,0.0196176)</td>
</tr>
<tr>
<td>65</td>
<td><code>constant</code>(3)</td>
<td><code>factor</code></td>
<td>1.03501</td>
<td>1.00417~1.06166(-0.0308423,0.0266517)</td>
</tr>
</tbody></table>
<h2 id="Discussions"><a href="#Discussions" class="headerlink" title="Discussions"></a>Discussions</h2><ol>
<li>In real world ,the <code>Incl</code> should not change with time, so we should fix it to some value (In the &#x3D;&#x3D;NuSTAR&#x3D;&#x3D; it is 63, but we’ve found that it cannot fit very well)</li>
<li>We don’t need to get the best fit because our goal is to fit <strong>all</strong> the observations, so if the <code>Reduced Chi-Squared</code>(Chi-Squared&#x2F;Degrees of freedom)is under 1.2,although it is still not the best fit ,it would be ok.</li>
</ol>
]]></content>
      <categories>
        <category>maxi1820</category>
      </categories>
      <tags>
        <tag>maxi1820</tag>
        <tag>X-ray spectrum fitting</tag>
      </tags>
  </entry>
  <entry>
    <title>为分类问题训练简单的机器学习算法</title>
    <url>/2023/01/24/machine-learning/machine1/</url>
    <content><![CDATA[<h2 id="标记与术语"><a href="#标记与术语" class="headerlink" title="标记与术语"></a>标记与术语</h2><ul>
<li>特征(features):例如数据的种类(一般以列存储)</li>
<li>样本(samples):一般以行存储,数据列表<br>$x^i_j$指第$i$个训练样本,训练集的第$j$维(第$j$个特征)<blockquote>
<p>这种标记输入输出均可</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>另外,机器学习是一回事,这本书中的python代码非常优美,值得学习</p>
</blockquote>
<h1 id="为分类问题训练简单的机器学习算法"><a href="#为分类问题训练简单的机器学习算法" class="headerlink" title="为分类问题训练简单的机器学习算法"></a>为分类问题训练简单的机器学习算法</h1><p>在这一部分,我们构造一个简单的线性分类算法实现我们的分类任务</p>
<h2 id="早期的机器学习模型"><a href="#早期的机器学习模型" class="headerlink" title="早期的机器学习模型"></a>早期的机器学习模型</h2><p>最早的机器学习模型是通过模拟神经元实现的<br>我们可以定义一个决定函数$\phi(x)$来从输入得到输出<br>通过将权重矢量与输入矢量点乘后通过一个阈值函数得到输出.<br>因此,通过计算$sign(\omega^Tx+\omega_0)$即可得到一个<strong>二分类输出</strong></p>
<span id="more"></span>

<h3 id="学习的逻辑"><a href="#学习的逻辑" class="headerlink" title="学习的逻辑"></a>学习的逻辑</h3><p>每一次学习,都需要让计算结果更加接近,因此需要更新权重矢量得到$\Delta \omega$<br>而$\Delta \omega&#x3D;\eta(y^i-\hat{y}^i)x$<br>式中的$\eta$被称为<strong>学习率</strong><br>其过程可以被总结为<br><img src="/2023/01/24/machine-learning/machine1/image-20230124170806576.png" alt="png"></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>下面我们尝试构造一个类来解决这个问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Perception</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,eta=<span class="number">0.01</span>,n_iter=<span class="number">100</span>,random_state=<span class="number">1</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.eta=eta</span><br><span class="line">        self.n_iter=n_iter</span><br><span class="line">        self.random_state=random_state</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fitdata</span>(<span class="params">self,X,y</span>):</span><br><span class="line">        self.errors_=[]<span class="comment">#aa_下划线代表运行后才存在的属性</span></span><br><span class="line">        rs=np.random.RandomState(self.random_state)<span class="comment">#种子生成随机数</span></span><br><span class="line">        self.w_=rs.normal(scale=<span class="number">0.1</span>,size=<span class="number">1</span>+X.shape[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.n_iter):</span><br><span class="line">            error=<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> x,yreal <span class="keyword">in</span> <span class="built_in">zip</span>(X,y):</span><br><span class="line">                ytest=np.where(np.dot(x,self.w_[:-<span class="number">1</span>])+self.w_[-<span class="number">1</span>]&gt;<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>)</span><br><span class="line">                self.w_[:-<span class="number">1</span>]+=self.eta*(yreal-ytest)*x</span><br><span class="line">                self.w_[-<span class="number">1</span>]+=self.eta*(yreal-ytest)</span><br><span class="line">                error+=np.count_nonzero(yreal-ytest)</span><br><span class="line">            self.errors_.append(error)</span><br><span class="line">            <span class="keyword">if</span>(error==<span class="number">0</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The fitting have completed&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The max iteration have reached&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">net_input</span>(<span class="params">self,X</span>):</span><br><span class="line">        <span class="keyword">return</span> np.dot(X,self.w_[:-<span class="number">1</span>])+self.w_[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">self,X</span>):</span><br><span class="line">        <span class="keyword">return</span> np.where(self.net_input(X)&gt;=<span class="number">0.0</span>,<span class="number">1</span>,-<span class="number">1</span>) </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这个类中我们定义<code>fit</code>实现拟合,拟合之后会有两个属性,分别为<code>w_</code>和<code>errors_</code>一个记录了线性参数,另外一个记录了误差</p>
<h2 id="使用鸢尾花数据集训练这个分类模型"><a href="#使用鸢尾花数据集训练这个分类模型" class="headerlink" title="使用鸢尾花数据集训练这个分类模型"></a>使用鸢尾花数据集训练这个分类模型</h2><p>为了测试我们这个的效果,我们将对山鸢尾和变色秋海棠两种不同的花进行分类,虽然特征不一定要是二维的,但是为了展示方便,我们使用两个特征萼片长度和花瓣长度作为特征.</p>
<p>我们首先使用<code>pandas</code>将数据从数据库中加载出来,并且看看大概</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df=pd.read_csv(<span class="string">&#x27;https://archive.ics.uci.edu/ml/&#x27;</span></span><br><span class="line">               <span class="string">&#x27;machine-learning-databases/iris/iris.data&#x27;</span>,</span><br><span class="line">               header=<span class="literal">None</span>)</span><br><span class="line">df.tail()               </span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>145</th>
      <td>6.7</td>
      <td>3.0</td>
      <td>5.2</td>
      <td>2.3</td>
      <td>Iris-virginica</td>
    </tr>
    <tr>
      <th>146</th>
      <td>6.3</td>
      <td>2.5</td>
      <td>5.0</td>
      <td>1.9</td>
      <td>Iris-virginica</td>
    </tr>
    <tr>
      <th>147</th>
      <td>6.5</td>
      <td>3.0</td>
      <td>5.2</td>
      <td>2.0</td>
      <td>Iris-virginica</td>
    </tr>
    <tr>
      <th>148</th>
      <td>6.2</td>
      <td>3.4</td>
      <td>5.4</td>
      <td>2.3</td>
      <td>Iris-virginica</td>
    </tr>
    <tr>
      <th>149</th>
      <td>5.9</td>
      <td>3.0</td>
      <td>5.1</td>
      <td>1.8</td>
      <td>Iris-virginica</td>
    </tr>
  </tbody>
</table>
</div>



<p>接下来,我们将前50个山鸢尾和前50个变色秋海棠的记录提取出来,分别标记为-1和1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">y=df.iloc[<span class="number">0</span>:<span class="number">100</span>,<span class="number">4</span>].values</span><br><span class="line">y=np.where(y==<span class="string">&#x27;Iris-setosa&#x27;</span>,-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">X=df.iloc[<span class="number">0</span>:<span class="number">100</span>,[<span class="number">0</span>,<span class="number">2</span>]].values</span><br><span class="line"></span><br><span class="line">plt.scatter(X[y==-<span class="number">1</span>,<span class="number">0</span>],X[y==-<span class="number">1</span>,<span class="number">1</span>],color=<span class="string">&#x27;red&#x27;</span>,marker=<span class="string">&#x27;o&#x27;</span>,label=<span class="string">&#x27;setosa&#x27;</span>)</span><br><span class="line">plt.scatter(X[y==<span class="number">1</span>,<span class="number">0</span>],X[y==<span class="number">1</span>,<span class="number">1</span>],color=<span class="string">&#x27;blue&#x27;</span>,marker=<span class="string">&#x27;x&#x27;</span>,label=<span class="string">&#x27;versicolor&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;sepal length [cm]&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;petal length [cm]&quot;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/2023/01/24/machine-learning/machine1/11_0.png" alt="png"></p>
<p>我们可以从上面那张图中看出来两种花可以被很好的区分开来,接下来我们来训练一下试试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model=Perception(<span class="number">0.001</span>)<span class="comment">#这里特地将eta调的很小使得梯度下降过程明显</span></span><br><span class="line">model.fitdata(X,y)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(model.errors_)+<span class="number">1</span>),model.errors_,<span class="string">&#x27;o-&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epochs&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;errors&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<pre><code>The fitting have completed
</code></pre>
<p><img src="/2023/01/24/machine-learning/machine1/13_1.png" alt="png"></p>
<p>可以注意到,最后的<code>errors</code>已经为0,为了进一步观察我们拟合的效果,我们将定义一个函数用来描绘决定区间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_decision_regions</span>(<span class="params">X,y,classifier,resolution=<span class="number">0.02</span></span>):</span><br><span class="line">    <span class="comment">#setup marker generator and color map</span></span><br><span class="line">    markers = (<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">    colors = (<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;lightgreen&#x27;</span>, <span class="string">&#x27;gray&#x27;</span>, <span class="string">&#x27;cyan&#x27;</span>)</span><br><span class="line">    cmap = ListedColormap(colors[:<span class="built_in">len</span>(np.unique(y))])<span class="comment"># unique函数可以找到所有独立的元素</span></span><br><span class="line">    <span class="comment">#plot the surface</span></span><br><span class="line">    x1_min,x1_max=X[:,<span class="number">0</span>].<span class="built_in">min</span>()-<span class="number">1</span>,X[:,<span class="number">0</span>].<span class="built_in">max</span>()+<span class="number">1</span></span><br><span class="line">    x2_min,x2_max=X[:,<span class="number">1</span>].<span class="built_in">min</span>()-<span class="number">1</span>,X[:,<span class="number">1</span>].<span class="built_in">max</span>()+<span class="number">1</span><span class="comment">#X1,X2分别是X轴Y轴</span></span><br><span class="line">    xx1,xx2=np.meshgrid(np.arange(x1_min,x1_max,resolution),</span><br><span class="line">                        np.arange(x2_min,x2_max,resolution))</span><br><span class="line">    Z=classifier.predict(np.array([xx1.ravel(),xx2.ravel()]).T)<span class="comment">#这里要将数组展平(这里面的向量操作非常有趣)</span></span><br><span class="line">    Z=Z.reshape(xx1.shape)</span><br><span class="line">    plt.contourf(xx1,xx2,Z,alpha=<span class="number">0.3</span>,cmap=cmap)</span><br><span class="line">    plt.xlim(xx1.<span class="built_in">min</span>(),xx1.<span class="built_in">max</span>())</span><br><span class="line">    plt.ylim(xx2.<span class="built_in">min</span>(),xx2.<span class="built_in">max</span>())</span><br><span class="line">    <span class="comment">#plot class samples</span></span><br><span class="line">    <span class="keyword">for</span> idx,cl <span class="keyword">in</span> <span class="built_in">enumerate</span>(np.unique(y)):<span class="comment">#这里使用enumerate来同时获得标签</span></span><br><span class="line">        plt.scatter(x=X[y==cl,<span class="number">0</span>],</span><br><span class="line">                    y=X[y==cl,<span class="number">1</span>],</span><br><span class="line">                    alpha=<span class="number">0.8</span>,</span><br><span class="line">                    c=colors[idx],</span><br><span class="line">                    marker=markers[idx],</span><br><span class="line">                    label=cl,</span><br><span class="line">                    edgecolors=<span class="string">&#x27;black&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>接下来,我们来展示一下绘图的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_decision_regions(X,y,classifier=model)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;sepal length [cm]&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;petal length [cm]&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<pre><code>C:\Users\lison\AppData\Local\Temp\ipykernel_25612\3891387916.py:20: UserWarning: You passed a edgecolor/edgecolors (&#39;black&#39;) for an unfilled marker (&#39;x&#39;).  Matplotlib is ignoring the edgecolor in favor of the facecolor.  This behavior may change in the future.
  plt.scatter(x=X[y==cl,0],
</code></pre>
<p><img src="/2023/01/24/machine-learning/machine1/17_1.png" alt="png"></p>
<blockquote>
<p>刚刚我们实现的可以被认为是一个单层的神经网络</p>
</blockquote>
<h2 id="可适应性线性神经元与学习收敛"><a href="#可适应性线性神经元与学习收敛" class="headerlink" title="可适应性线性神经元与学习收敛"></a>可适应性线性神经元与学习收敛</h2><p>在这一部分,我们将研究另外一种单层神经网络:ADAptive LInear NEuron(<code>Adaline</code>)<br>这种算法非常有趣因为其展现了关于定义和最小化连续损失函数的方法,这便于让我们理解之后我们所用的相关函数<br><code>Adaline</code>算法与感知机最关键的区别在于权重函数是使用一个线性激发函数而非一个单位阶跃函数,在<code>Adaline</code>算法中<br>这样一个线性激发函数就是网络输入的线性函数因此有:<br>$$\phi(w^Tx)&#x3D;w^Tx$$<br>虽然激发函数是用在学习权重的,但我们也可以用其来评估最后结果,<code>ADaline</code>的特殊性可以用下面一张图来展示<br><img src="/2023/01/24/machine-learning/machine1/image-20230124170927708.png" alt="png"></p>
<h3 id="使用梯度下降法最小化损失函数"><a href="#使用梯度下降法最小化损失函数" class="headerlink" title="使用梯度下降法最小化损失函数"></a>使用梯度下降法最小化损失函数</h3><p>对于<code>Adaline</code>而言,我们可以定义损失函数$J$并且使用方均根法得到权重<br>$$J(\omega)&#x3D;\frac{1}{2}\sum_i(y^{(i)}-\phi(z^{(i)}))^2$$<br>在该式中,$\frac{1}{2}$只是为了方便求梯度,接下来我们就可以使用一个非常有效的方法<strong>梯度下降法</strong>来使损失函数最小,原理为<br>$$\Delta \omega&#x3D;-\eta\nabla J(\omega)$$<br>梯度的计算为<br>$$\frac{\partial J}{\partial \omega_j}&#x3D;-\sum_i(y^{(i)}-\phi(z^{(i)}))x^{(i)}_j$$</p>
<blockquote>
<p>需要注意一个计算上的不同,在此处我们的计算是<strong>所有样本一起算的</strong>而不是像之前一样<strong>一个样本更新一次</strong></p>
</blockquote>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AdalineGD</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,eta=<span class="number">0.001</span>,n_iter=<span class="number">100</span>,random_state=<span class="number">1</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.eta=eta</span><br><span class="line">        self.n_iter=n_iter</span><br><span class="line">        self.random_state=random_state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fit</span>(<span class="params">self,X,y</span>):</span><br><span class="line">        rgen=np.random.RandomState(self.random_state)</span><br><span class="line">        self.w_=rgen.normal(<span class="number">0.0</span>,<span class="number">0.1</span>,size=<span class="number">1</span>+X.shape[<span class="number">1</span>])</span><br><span class="line">        self.cost_=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.n_iter):</span><br><span class="line">            err,errg,errw0=self._calc_cost(X,y)</span><br><span class="line">            self.cost_.append(err)</span><br><span class="line">            self.w_[<span class="number">1</span>:]+=-self.eta*errg</span><br><span class="line">            self.w_[<span class="number">0</span>]+=-self.eta*errw0</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_calc_cost</span>(<span class="params">self,X,y</span>):</span><br><span class="line">        yp=(np.dot(X,self.w_[<span class="number">1</span>:].reshape(-<span class="number">1</span>,<span class="number">1</span>))+self.w_[<span class="number">0</span>]).reshape(<span class="number">1</span>,-<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#print(yp)</span></span><br><span class="line">        err=np.<span class="built_in">sum</span>((yp[<span class="number">0</span>]-y)**<span class="number">2</span>)/<span class="number">2</span></span><br><span class="line">        errg=np.dot((yp[<span class="number">0</span>]-y),X)</span><br><span class="line">        errw0=np.<span class="built_in">sum</span>(yp[<span class="number">0</span>]-y)</span><br><span class="line">        <span class="keyword">return</span> err,errg[<span class="number">0</span>],errw0</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">self,X</span>):</span><br><span class="line">        <span class="keyword">return</span> np.where(np.dot(X,self.w_[<span class="number">1</span>:])+self.w_[<span class="number">0</span>]&gt;<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>接下来,我们将之前的数据输入进去试一试看看如何</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y=df.iloc[<span class="number">0</span>:<span class="number">100</span>,<span class="number">4</span>].values</span><br><span class="line">y=np.where(y==<span class="string">&#x27;Iris-setosa&#x27;</span>,-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">X=df.iloc[<span class="number">0</span>:<span class="number">100</span>,[<span class="number">0</span>,<span class="number">2</span>]].values</span><br><span class="line">adamodel=AdalineGD()</span><br><span class="line">adamodel.fit(X,y)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(adamodel.cost_)+<span class="number">1</span>),np.log(adamodel.cost_),<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epochs&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;log(cost)&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">adamodel.w_</span><br></pre></td></tr></table></figure>

<p><img src="/2023/01/24/machine-learning/machine1/24_0.png" alt="png"><br>​    </p>
<pre><code>array([-3.89410517e+55, -2.18332011e+56, -2.18332011e+56])
</code></pre>
<p>可以发现,程序直接爆炸,此时可能是$eta$调大了,我们把$eta$调为1E-5试试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y=df.iloc[<span class="number">0</span>:<span class="number">100</span>,<span class="number">4</span>].values</span><br><span class="line">y=np.where(y==<span class="string">&#x27;Iris-setosa&#x27;</span>,-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">X=df.iloc[<span class="number">0</span>:<span class="number">100</span>,[<span class="number">0</span>,<span class="number">2</span>]].values</span><br><span class="line">adamodel=AdalineGD(eta=<span class="number">4E-4</span>,n_iter=<span class="number">10000</span>)</span><br><span class="line">adamodel.fit(X,y)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(adamodel.cost_)+<span class="number">1</span>),adamodel.cost_,<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epochs&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;log(cost)&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">adamodel.w_</span><br></pre></td></tr></table></figure>

<p><img src="/2023/01/24/machine-learning/machine1/26_0.png" alt="png"><br>​    </p>
<pre><code>array([-3.33272936,  0.39707341,  0.40543187])
</code></pre>
<p>可以注意到,逐渐在趋向一个稳定值,这之中存在的问题可以用下图展示<br><img src="/2023/01/24/machine-learning/machine1/image-20230124171511278.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_decision_regions(X,y,classifier=adamodel)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;sepal length [cm]&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;petal length [cm]&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<pre><code>C:\Users\lison\AppData\Local\Temp\ipykernel_25612\3891387916.py:20: UserWarning: You passed a edgecolor/edgecolors (&#39;black&#39;) for an unfilled marker (&#39;x&#39;).  Matplotlib is ignoring the edgecolor in favor of the facecolor.  This behavior may change in the future.
  plt.scatter(x=X[y==cl,0],
</code></pre>
<p><img src="/2023/01/24/machine-learning/machine1/28_1.png" alt="png"></p>
<p>可以注意到,这种计算方法非常依赖初值,而且最后也没有完全分开来,并不是非常理想,因此需要优化</p>
<h3 id="使用标准化提升梯度下降法效果"><a href="#使用标准化提升梯度下降法效果" class="headerlink" title="使用标准化提升梯度下降法效果"></a>使用标准化提升梯度下降法效果</h3><p>标准化是一个机器学习过程中的非常重要的手段,在这一部分中,我们使用一种<em>正态分布标准化</em><br>这种方法假定数据呈现出正态分布,处理的手段是将数据减去平均值并且除以数据的标准差,即:<br>$$x_j’&#x3D;\frac{x_j-\mu}{\sigma}$$<br>这么做的好处在于可以让优化器更快的实现达到最低值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_std=np.copy(X)</span><br><span class="line">X_std[:,<span class="number">0</span>]=(X[:,<span class="number">0</span>]-X[:,<span class="number">0</span>].mean())/X[:,<span class="number">0</span>].std()</span><br><span class="line">X_std[:,<span class="number">1</span>]=(X[:,<span class="number">1</span>]-X[:,<span class="number">1</span>].mean())/X[:,<span class="number">1</span>].std()</span><br></pre></td></tr></table></figure>

<p>在标准化之后,我们将数据输入到前面的模型中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stdada=AdalineGD(<span class="number">1E-3</span>,<span class="number">150</span>,<span class="number">1</span>)</span><br><span class="line">stdada.fit(X_std,y)</span><br><span class="line">plot_decision_regions(X_std,y,classifier=stdada)</span><br></pre></td></tr></table></figure>

<pre><code>C:\Users\lison\AppData\Local\Temp\ipykernel_25612\3891387916.py:20: UserWarning: You passed a edgecolor/edgecolors (&#39;black&#39;) for an unfilled marker (&#39;x&#39;).  Matplotlib is ignoring the edgecolor in favor of the facecolor.  This behavior may change in the future.
  plt.scatter(x=X[y==cl,0],
</code></pre>
<p><img src="/2023/01/24/machine-learning/machine1/33_1.png" alt="png"></p>
<p>效果变好了一些(但实际上初值问题仍然存在)</p>
<h2 id="大规模机器学习与随机梯度下降法"><a href="#大规模机器学习与随机梯度下降法" class="headerlink" title="大规模机器学习与随机梯度下降法"></a>大规模机器学习与随机梯度下降法</h2><p>现在我们考虑一个非常巨大的数据集(可能有上百万的数据)<br>我们现在用另外一种方式,对于每一个数据,都对$\Delta \omega$进行一次更新,实际上随机梯度下降法达到稳定的速度快于批量梯度下降法(虽然前者看起来是后者的近似)</p>
<p>为了更好的进行梯度下降法,我们需要对数据进行一个更好的随机化处理<br>同时,这么做还有一个好处,因为在一些网络程序之中,数据和模型的训练是同步进行的</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>python</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>使用scikit-learn进行分类学习</title>
    <url>/2023/01/26/machine-learning/machine2/</url>
    <content><![CDATA[<p>在前面一部分,我们构造了几种分类算法,而在这一部分,我们将介绍利用<code>scikit-learn</code>提供的便于使用的接口进行机器学习<br>将分成以下几个部分进行介绍:</p>
<ol>
<li>对具有良好稳定性的常用分类算法的介绍,例如<code>logistic</code>回归算法,支持向量机,决策树</li>
<li>一些使用<code>scikit-learn</code>进行一些常见的应用</li>
<li>对于线性与非线性决策边界的优势与劣势的讨论</li>
</ol>
<h2 id="选取分类算法"><a href="#选取分类算法" class="headerlink" title="选取分类算法"></a>选取分类算法</h2><p>俗话说:天下没有免费的午餐,不同的分类算法具有相应的优势与劣势,在选择的时候需要充分考虑数据的特征以及目的,一般来说,训练一个机器学习模型可以分为以下五步</p>
<ol>
<li>选取特征收集训练数据</li>
<li>选取一个表示矩阵</li>
<li>选取一个分类与优化算法</li>
<li>计算这个算法的效果</li>
<li>改良这个算法</li>
</ol>
<span id="more"></span>

<h2 id="使用scikit-learn训练一个算法"><a href="#使用scikit-learn训练一个算法" class="headerlink" title="使用scikit-learn训练一个算法"></a>使用<code>scikit-learn</code>训练一个算法</h2><p>为了快速使用<code>scikit-learn</code>库,我们将延续前面的例子,使用那个花的分类模型进行练习<br>我们这次将从<code>sklearn</code>的<code>datasets</code>库中加载数据集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">iris=datasets.load_iris()</span><br><span class="line">X=iris.data[:,[<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">y=iris.target</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Class labels:&quot;</span>,np.unique(y))</span><br></pre></td></tr></table></figure>

<pre><code>Class labels: [0 1 2]
</code></pre>
<p>在这里,我们可以发现,数据被分成了三类(为了妥善处理内存问题并且加快速度,一般只会拿整数进行标号)</p>
<p>为了更好的判断一个数据集训练的有多好,我们将数据分割成训练集和测试集(这一部分在未来会进一步讨论)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">Xtrain,Xtest,ytrain,ytest=train_test_split(X,y,test_size=<span class="number">0.2</span>,random_state=<span class="number">1</span>,stratify=y)</span><br></pre></td></tr></table></figure>

<p><code>stratify</code>的指定表明在分割的训练集与测试集中,<code>y</code>的三种不同值被均等分割</p>
<p>相似的,为了更好的进行机器学习,我们需要对数据进行标准化处理,在这里,我们使用正态分布进行标准化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">sc=StandardScaler()</span><br><span class="line">sc.fit(Xtrain)</span><br><span class="line">X_train_std=sc.transform(Xtrain)</span><br><span class="line">X_test_std=sc.transform(Xtest)</span><br></pre></td></tr></table></figure>

<p>需要注意,我们要对训练集和测试集采用相同的归一化手段,这样可以才能实现统一</p>
<p>接下来我们就可以进行训练了.我们在这里使用<code>OvR</code>方法对多分类问题进行处理,代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Perceptron</span><br><span class="line">ppn=Perceptron(n_iter_no_change=<span class="number">100</span>,eta0=<span class="number">1e-3</span>,random_state=<span class="number">1</span>)</span><br><span class="line">ppn.fit(X_train_std,ytrain)</span><br></pre></td></tr></table></figure>




<pre><code>Perceptron(eta0=0.001, n_iter_no_change=100, random_state=1)
</code></pre>
<p>就像前面所说的一样,我们需要正确的选择学习率,如果学习率过高,那么模型会跳过全局最低点,而如果学习率过低,学习速率又会太低.</p>
<p>我们可以使用<code>predict</code>对训练后的模型进行预测,例如以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y_pred=ppn.predict(X_test_std)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Miss classfied samples:&#123;&#125;&quot;</span>.<span class="built_in">format</span>((ytest!=y_pred).<span class="built_in">sum</span>()))</span><br></pre></td></tr></table></figure>

<pre><code>Miss classfied samples:1
</code></pre>
<p>当然,<code>scikit-learn</code>库里面也内置了处理学习准确率的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Accuracy: %.2f&#x27;</span>%accuracy_score(ytest,y_pred))</span><br></pre></td></tr></table></figure>

<pre><code>Accuracy: 0.97
</code></pre>
<p>接下来,我们仿照上一章的例子,编写决策区间的绘图函数</p>
<blockquote>
<p>在其中,我们添加了一些修改来展现出数据是来自于<em>测试集</em>的</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_decision_regions</span>(<span class="params">X,y,classifier,resolution=<span class="number">0.02</span>,test=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="comment">#setup marker generator and color map</span></span><br><span class="line">    markers = (<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">    colors = (<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;lightgreen&#x27;</span>, <span class="string">&#x27;gray&#x27;</span>, <span class="string">&#x27;cyan&#x27;</span>)</span><br><span class="line">    cmap = ListedColormap(colors[:<span class="built_in">len</span>(np.unique(y))])<span class="comment"># unique函数可以找到所有独立的元素</span></span><br><span class="line">    <span class="comment">#plot the surface</span></span><br><span class="line">    x1_min,x1_max=X[:,<span class="number">0</span>].<span class="built_in">min</span>()-<span class="number">1</span>,X[:,<span class="number">0</span>].<span class="built_in">max</span>()+<span class="number">1</span></span><br><span class="line">    x2_min,x2_max=X[:,<span class="number">1</span>].<span class="built_in">min</span>()-<span class="number">1</span>,X[:,<span class="number">1</span>].<span class="built_in">max</span>()+<span class="number">1</span><span class="comment">#X1,X2分别是X轴Y轴</span></span><br><span class="line">    xx1,xx2=np.meshgrid(np.arange(x1_min,x1_max,resolution),</span><br><span class="line">                        np.arange(x2_min,x2_max,resolution))</span><br><span class="line">    Z=classifier.predict(np.array([xx1.ravel(),xx2.ravel()]).T)<span class="comment">#这里要将数组展平(这里面的向量操作非常有趣)</span></span><br><span class="line">    Z=Z.reshape(xx1.shape)</span><br><span class="line">    plt.contourf(xx1,xx2,Z,alpha=<span class="number">0.3</span>,cmap=cmap)</span><br><span class="line">    plt.xlim(xx1.<span class="built_in">min</span>(),xx1.<span class="built_in">max</span>())</span><br><span class="line">    plt.ylim(xx2.<span class="built_in">min</span>(),xx2.<span class="built_in">max</span>())</span><br><span class="line">    <span class="comment">#plot class samples</span></span><br><span class="line">    <span class="keyword">for</span> idx,cl <span class="keyword">in</span> <span class="built_in">enumerate</span>(np.unique(y)):<span class="comment">#这里使用enumerate来同时获得标签</span></span><br><span class="line">        plt.scatter(x=X[y==cl,<span class="number">0</span>],</span><br><span class="line">                    y=X[y==cl,<span class="number">1</span>],</span><br><span class="line">                    alpha=<span class="number">0.8</span>,</span><br><span class="line">                    c=colors[idx],</span><br><span class="line">                    marker=markers[idx],</span><br><span class="line">                    label=cl,</span><br><span class="line">                    edgecolors=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> test:</span><br><span class="line">        <span class="comment">#将测试集标记出来</span></span><br><span class="line">        plt.scatter(x=X[:,<span class="number">0</span>],</span><br><span class="line">                    y=X[:,<span class="number">1</span>],</span><br><span class="line">                    alpha=<span class="number">1</span>,</span><br><span class="line">                    s=<span class="number">100</span>,</span><br><span class="line">                    marker=<span class="string">&#x27;o&#x27;</span>,</span><br><span class="line">                    edgecolors=<span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">                    c=<span class="string">&#x27;None&#x27;</span>)<span class="comment">#这里颜色的设定需要专门注意</span></span><br></pre></td></tr></table></figure>

<p>我们可以将刚才训练的模型的效果展示出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_decision_regions(X_train_std,ytrain,ppn)</span><br><span class="line">plot_decision_regions(X_test_std,ytest,ppn,test=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<p><img src="/2023/01/26/machine-learning/machine2/scikit-learn_17_1.png" alt="png"></p>
<h2 id="使用logistic回归构建类模型"><a href="#使用logistic回归构建类模型" class="headerlink" title="使用logistic回归构建类模型"></a>使用logistic回归构建类模型</h2><p>虽然我们之前构建的分类算法在机器学习分类中非常好用,但是这中间有个非常严重的问题,那就是当几个类不能被线性分割时,将永远不会收敛</p>
<p>为了节约我们的时间,我们将介绍另外一种强而有力的线性分类模型:logistic回归模型</p>
<blockquote>
<p>需要注意,这里虽然用了”回归”这个名字,但是算法是用来分类的</p>
</blockquote>
<h3 id="logistic回归的介绍和条件概率"><a href="#logistic回归的介绍和条件概率" class="headerlink" title="logistic回归的介绍和条件概率"></a>logistic回归的介绍和条件概率</h3><p>为了理解logistic回归,我们首先介绍<em>比值比</em>,比值比可以被写作$\frac{p}{1-p}$(其中$p$是我们所想预测的概率),接下来我们就可以定义比值比的对数<br>$$logit(p)&#x3D;\log\frac{p}{1-p}$$<br>需要注意到,我们可以将发生预测事件分类为$y&#x3D;1$,认为某一特征与$logit(p(y&#x3D;1|x))$之间呈现线性关系</p>
<p>而我们的工作是预测某一个样本属于某一类的可能性,即从比值比的对数求$p$,那么我们可以使用一个s型生长曲线<br>$$\phi(z)&#x3D;\frac{1}{1+e^{-z}}$$<br>其中$z$是输入,为$z&#x3D;w^Tx$</p>
<p>为了更加直观的看出这个的效果,我们首先绘制一幅s型生长曲线的图像</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span>/(<span class="number">1</span>+<span class="number">1.0</span>*np.exp(-x))</span><br><span class="line">x=np.linspace(-<span class="number">7</span>,<span class="number">7</span>,<span class="number">1000</span>)</span><br><span class="line">phix=sigmoid(x)</span><br><span class="line">plt.plot(x,phix)</span><br><span class="line">plt.axvline(<span class="number">0.0</span>,c=<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">plt.ylim(-<span class="number">0.1</span>,<span class="number">1.1</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;$\phi (z)$&#x27;</span>)</span><br><span class="line"><span class="comment">#y axis ticks and gridline</span></span><br><span class="line">plt.yticks([<span class="number">0.0</span>,<span class="number">0.5</span>,<span class="number">1.0</span>])</span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.yaxis.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/26/machine-learning/machine2/scikit-learn_20_0.png" alt="png"><br>​    </p>
<p>我们可以仿照上一章的例子,就是将<code>ADaline</code>中的线性函数变成了生长曲线,而对于生长曲线的输出则是以0.5为阈值大于0.5为1,小于0.5为0</p>
<h3 id="学习logistic误差函数"><a href="#学习logistic误差函数" class="headerlink" title="学习logistic误差函数"></a>学习<code>logistic</code>误差函数</h3><p>接下来我们讨论如何拟合模型中的参数,我们之前定义过平方和误差函数<br>$$J(\omega)&#x3D;\sum_i\frac{1}{2}(\phi(z^{(i)}-y^{(i)})^2$$<br>我们的目的就是让这个函数值最小,首先我们需要定义在已知$x$下,$y$的后验概率分布<br>$$L(\omega)&#x3D;P(y|x;\omega)&#x3D;\Pi_{i&#x3D;1}^nP(y^{(i)}|x^{(i)};\omega)&#x3D;\Pi_{i&#x3D;1}^n(\phi(z^{(i)}))^{y^{(i)}}(1-\phi(z^{(i)}))^{1-y^{(i)}}$$<br>对于实际应用之中,往往取对数可以让问题更加方便,因此最后误差函数在定义时就可以被写作:<br>若$y&#x3D;1$则为$-\log(\phi(z))$,若$y&#x3D;0$则为$-\log(1-\phi(z))$<br>这么做的好处在于,我们对于错误的估计,误差函数会逐渐加大,从下面这张图可以看出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cost_0</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="keyword">return</span> -np.log(sigmoid(z))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cost_1</span>(<span class="params">z</span>):</span><br><span class="line">    <span class="keyword">return</span> -np.log(<span class="number">1</span>-sigmoid(z))</span><br><span class="line">z=np.arange(-<span class="number">10</span>,<span class="number">10</span>,<span class="number">0.1</span>)</span><br><span class="line">phiz=sigmoid(z)</span><br><span class="line">c0=cost_0(z)</span><br><span class="line">c1=cost_1(z)</span><br><span class="line">plt.plot(phiz,c1,<span class="string">&quot;-&quot;</span>,label=<span class="string">&#x27;J(w) if y=1&#x27;</span>)</span><br><span class="line">plt.plot(phiz,c0,<span class="string">&quot;--&quot;</span>,label=<span class="string">&#x27;J(w) if y=0&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;$\phi(z)$&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;J(w)&quot;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.xlim([<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/26/machine-learning/machine2/scikit-learn_22_0.png" alt="png"><br>​    </p>
<h3 id="将Adaline内置logistic回归"><a href="#将Adaline内置logistic回归" class="headerlink" title="将Adaline内置logistic回归"></a>将<code>Adaline</code>内置logistic回归</h3><p>我们在之前的<code>Adaline</code>算法中,可以做出以下修改:</p>
<p><img src="/2023/01/26/machine-learning/machine2/image-20230126003038092.png" alt="png"></p>
<ol>
<li>将线性激发函数修改为生长激发函数</li>
<li>修改分类阈值从-1到1修改为0到1</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#TODO 这些内容还需要修改,未来改一下</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LogisticRegressionGD</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,eta=<span class="number">0.001</span>,n_iter=<span class="number">100</span>,random_state=<span class="number">1</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.eta=eta</span><br><span class="line">        self.n_iter=n_iter</span><br><span class="line">        self.random_state=random_state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fit</span>(<span class="params">self,X,y</span>):</span><br><span class="line">        rgen=np.random.RandomState(self.random_state)</span><br><span class="line">        self.w_=rgen.normal(<span class="number">0.0</span>,<span class="number">0.1</span>,size=<span class="number">1</span>+X.shape[<span class="number">1</span>])</span><br><span class="line">        self.cost_=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.n_iter):</span><br><span class="line">            err,errg,errw0=self._calc_cost(X,y)</span><br><span class="line">            self.cost_.append(err)</span><br><span class="line">            self.w_[<span class="number">1</span>:]+=-self.eta*errg</span><br><span class="line">            self.w_[<span class="number">0</span>]+=-self.eta*errw0</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_calc_cost</span>(<span class="params">self,X,y</span>):</span><br><span class="line">        yp=(np.dot(X,self.w_[<span class="number">1</span>:].reshape(-<span class="number">1</span>,<span class="number">1</span>))+self.w_[<span class="number">0</span>]).reshape(<span class="number">1</span>,-<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#print(yp)</span></span><br><span class="line">        err=np.<span class="built_in">sum</span>((yp[<span class="number">0</span>]-y)**<span class="number">2</span>)/<span class="number">2</span></span><br><span class="line">        errg=np.dot((yp[<span class="number">0</span>]-y),X)</span><br><span class="line">        errw0=np.<span class="built_in">sum</span>(yp[<span class="number">0</span>]-y)</span><br><span class="line">        <span class="keyword">return</span> err,errg[<span class="number">0</span>],errw0</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">self,X</span>):</span><br><span class="line">        <span class="keyword">return</span> np.where(np.dot(X,self.w_[<span class="number">1</span>:])+self.w_[<span class="number">0</span>]&gt;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="使用scikit-learn训练一个回归模型"><a href="#使用scikit-learn训练一个回归模型" class="headerlink" title="使用scikit-learn训练一个回归模型"></a>使用<code>scikit-learn</code>训练一个回归模型</h3><p>我们刚才的讨论是基于数学计算上的区别,现在我们来介绍一下如何使用<code>scikit-learn</code>来训练一个回归模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">lr=LogisticRegression(C=<span class="number">100.0</span>,random_state=<span class="number">1</span>)<span class="comment">#?这个C是</span></span><br><span class="line">lr.fit(X_train_std,ytrain)</span><br><span class="line">plot_decision_regions(X_train_std,ytrain,classifier=lr)</span><br><span class="line">plot_decision_regions(X_test_std,ytest,classifier=lr,test=<span class="literal">True</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;petal length&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;petal width&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>




<p><img src="/2023/01/26/machine-learning/machine2/scikit-learn_26_1.png" alt="png"></p>
<p>我们在看这个问题的时候,会很好奇这个训练参数<code>C</code>是什么东西,我们将在下一小节介绍这个问题</p>
<blockquote>
<p>这个问题主要涉及到关于过拟合和欠拟合</p>
</blockquote>
<p>我们还可以计算出每一个元素属于某一类的概率,需要使用<code>predict_proba</code>方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr.predict_proba(X_test_std[:<span class="number">3</span>,:])*<span class="number">100</span><span class="comment">#这里乘100为了方便用百分数</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[5.83527138e-11, 4.26528227e-03, 9.99957347e+01],
       [9.99623181e+01, 3.76819349e-02, 3.51225598e-17],
       [2.32430493e+00, 9.76756905e+01, 4.61949531e-06]])
</code></pre>
<p>相应的,我们可以用这个来进行预测</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr.predict_proba(X_test_std[:<span class="number">3</span>,:]).argmax(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([2, 0, 1], dtype=int64)
</code></pre>
<blockquote>
<p><strong>一个需要注意的问题</strong><br>在使用<code>predict</code>时,如果预测是一个单一样本,那么就需要进行<code>reshape</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr.predict(X_test_std[<span class="number">0</span>,:].reshape(<span class="number">1</span>,-<span class="number">1</span>))</span><br></pre></td></tr></table></figure>




<pre><code>array([2])
</code></pre>
<h3 id="通过正则化处理过拟合"><a href="#通过正则化处理过拟合" class="headerlink" title="通过正则化处理过拟合"></a>通过正则化处理过拟合</h3><p>过拟合在机器学习中是一个常见的问题,<strong>过拟合</strong>主要来自于过于复杂的模型,模型非常容易受到一噪音的影响,而<strong>欠拟合</strong>则是相反的情况,主要来自于过于简单的模型约束过多<br> <img src="/2023/01/26/machine-learning/machine2/image-20230126003240978.png" alt="image-20230126003240978"><br>虽然我们现在讨论的是线性模型,但是很快我们就会遇到一些更加复杂的决策区间<br>这个时候我们就需要使用正则化来调节模型的自由度,这种手段可以有效的处理特征之间的相关性,消除数据误差和防止过拟合有重要作用</p>
<p>正则化的原理是通过添加约束来消除极端变量的值,最为常用的是<code>L2正则化</code>,可以被写成下式<br>$$\frac{\lambda}{2}||\omega||^2&#x3D;\frac{\lambda}{2}\sum_{j&#x3D;1}^m\omega_j^2$$<br>那么我们之前所使用的损失函数就可以被加上这一项$\frac{\lambda}{2}||\omega||^2$</p>
<blockquote>
<p>这个有点像拉格朗日乘子法,添加了一个约束,但是这个$\lambda$是一个预先设定好的量<br>而如果$\lambda$越大,正则化强度越高,之前的参数$C$就是和这个密切相关,是它的倒数<br>我们用绘制两个参数随着$C$变化的变化展示<code>L2正则化</code>强度对机器学习结果的影响</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weights,params=[],[]</span><br><span class="line">lrl=[]</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> np.arange(-<span class="number">5</span>,<span class="number">5</span>,<span class="number">0.5</span>):</span><br><span class="line">    lr=LogisticRegression(C=<span class="number">10.</span>**c,random_state=<span class="number">1</span>)</span><br><span class="line">    lr.fit(X_train_std,ytrain)</span><br><span class="line">    weights.append(lr.coef_[<span class="number">1</span>])</span><br><span class="line">    params.append(<span class="number">10.</span>**c)</span><br><span class="line">weights=np.array(weights)</span><br><span class="line">plt.plot(params,weights[:,<span class="number">0</span>],label=<span class="string">&#x27;petal length&#x27;</span>)</span><br><span class="line">plt.plot(params,weights[:,<span class="number">1</span>],label=<span class="string">&#x27;petal width&#x27;</span>,linestyle=<span class="string">&quot;--&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;cofficient&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.xscale(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/26/machine-learning/machine2/scikit-learn_34_0.png" alt="png"><br>​    </p>
<p>可以注意到,$C$越小,相应的正则化强度越高,导致参数越大</p>
<h2 id="使用支持向量机处理最大边界问题"><a href="#使用支持向量机处理最大边界问题" class="headerlink" title="使用支持向量机处理最大边界问题"></a>使用支持向量机处理最大边界问题</h2><p>另外一个强力而广泛应用的算法是<strong>支持向量机算法</strong><code>Support Vector Machine(SVM)</code>,这可以被看做是感知机的升级版.<br>在感知机算法中,我们的目标是让误分类误差尽量小,但是在支持向量机算法中,我们的目标是让边界最大</p>
<p>边界被定义为决策边界和离决策边界最近的点的距离,又被称作<strong>支持向量</strong><code>support vectors</code>,下图可以展现出来<br><img src="/2023/01/26/machine-learning/machine2/image-20230126003135775.png" alt="png"></p>
<h3 id="最大边界"><a href="#最大边界" class="headerlink" title="最大边界"></a>最大边界</h3><p>大的边界在于这种手段可以得到尽量小的整体误差,但是小的边界更加容易发生过拟合.为了更好地理解最大边界,我们来考量一下<em>正负决策边界</em>,这些边界与决策边界平行,可以用下式来表述<br>$$\omega_0+\omega^Tx_{pos}&#x3D;1$$<br>(到标号为1的点的分割面)<br>$$\omega_0+\omega^Tx_{neg}&#x3D;-1$$<br>(到标号为-1的点的分割面)<br>假如我们两式相减,我们可以得到<br>$$\omega^T(x_{pos}-x_{neg})&#x3D;2$$<br>我们可以借助$\omega$的长度对这个式子进行归一化<br>$$\frac{\omega^T(x_{pos}-x_{neg})}{||\omega||}&#x3D;\frac{2}{||\omega||}$$<br>左侧的式子可以被看做正负决策边界的距离,这就是我们希望最大化的东西</p>
<p>现在,问题就转变为让$\frac{2}{||\omega||}$最大(前提是可以使用两个面的分开,满足对于所有的i有 $y^{(i)}(\omega_0+\omega^Tx^{(i)})\ge 1$ 这样的约束(线性约束))<br>在实际问题中,往往使用<em>二次规划</em>来解决这个问题,但这实在是有点复杂,我们不再涉及</p>
<h3 id="通过添加松弛变量应对无法线性完全分类问题"><a href="#通过添加松弛变量应对无法线性完全分类问题" class="headerlink" title="通过添加松弛变量应对无法线性完全分类问题"></a>通过添加松弛变量应对无法线性完全分类问题</h3><p>我们来简单介绍松弛变量$\xi$,这种被称作<strong>软边界分类问题</strong>.引入松弛变量的目的是线性约束需要被松弛来解决无法线性完全分类问题来实现对存在误分类的优化</p>
<p>正值松弛变量就是简单的减在线性约束上<br>$$y^{(i)}(\omega_0+\omega^Tx^{(i)})\ge 1-\xi^{(i)}$$<br>因此新的最优化问题可以被看做让以下式子最小<br>$$\frac{1}{2}||\omega||^2+C(\sum_i \xi^{(i)})$$<br>通过修改$C$,我们可以控制错误分类的<strong>惩罚</strong>,下面这张图展示了不同的$C$的效果<br><img src="attachment:image.png" alt="image.png"><br>这一观念与正则化有关,就像我们所讨论的$C$一样,减少$C$的值会增加约束并减少自由度<br>现在,我们来训练一个支持向量机的模型来给花分类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line">svm=SVC(kernel=<span class="string">&#x27;linear&#x27;</span>,C=<span class="number">1.0</span>,random_state=<span class="number">1</span>)</span><br><span class="line">svm.fit(X_train_std,ytrain)</span><br><span class="line">plot_decision_regions(X_train_std,ytrain,classifier=svm)</span><br><span class="line">plot_decision_regions(X_test_std,ytest,classifier=svm,test=<span class="literal">True</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;petal length [standardized]&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;petal width [standardized]&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>




<p><img src="/2023/01/26/machine-learning/machine2/scikit-learn_39_1.png" alt="png"></p>
<h3 id="在scikit-learn中作为代替的实现"><a href="#在scikit-learn中作为代替的实现" class="headerlink" title="在scikit-learn中作为代替的实现"></a>在<code>scikit-learn</code>中作为代替的实现</h3><p>在一些特殊的情况下(比如数据集奇大无比),可以去参考<code>SGDClassifier</code>实现</p>
<h2 id="使用一个SVM核来解决非线性问题"><a href="#使用一个SVM核来解决非线性问题" class="headerlink" title="使用一个SVM核来解决非线性问题"></a>使用一个SVM核来解决非线性问题</h2><p>支持向量机方法如此流行还有一个原因在于支持向量机可以非常轻易的被内核化(<code>kernelized</code>),在我们深入讨论SVM核的数学机理之前,我们首先来看一个例子</p>
<h3 id="对无法线性区分的数据的核方法"><a href="#对无法线性区分的数据的核方法" class="headerlink" title="对无法线性区分的数据的核方法"></a>对无法线性区分的数据的核方法</h3><p>在接下来的数据集中,我们将创建一个简单的X状数据使用<code>logical_xor</code>函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">X_xor=np.random.randn(<span class="number">200</span>,<span class="number">2</span>)</span><br><span class="line">y_xor=np.logical_xor(X_xor[:,<span class="number">0</span>]&gt;<span class="number">0</span>,X_xor[:,<span class="number">1</span>]&gt;<span class="number">0</span>)</span><br><span class="line">y_xor=np.where(y_xor,<span class="number">1</span>,-<span class="number">1</span>)</span><br><span class="line">plt.scatter(X_xor[y_xor==<span class="number">1</span>,<span class="number">0</span>],X_xor[y_xor==<span class="number">1</span>,<span class="number">1</span>],c=<span class="string">&#x27;b&#x27;</span>,marker=<span class="string">&#x27;x&#x27;</span>,label=<span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">plt.scatter(X_xor[y_xor==-<span class="number">1</span>,<span class="number">0</span>],X_xor[y_xor==-<span class="number">1</span>,<span class="number">1</span>],c=<span class="string">&#x27;r&#x27;</span>,marker=<span class="string">&#x27;s&#x27;</span>,label=<span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">plt.xlim([-<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">plt.ylim([-<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/26/machine-learning/machine2/scikit-learn_43_0.png" alt="png"><br>​    </p>
<p>可以看出来,这两种数据有着显著的区别,但是又明显不能线性区分开来,这个时候就要使用<code>核</code>来解决问题</p>
<p>对于核方法最为简单的解释就是将数据通过指定的<strong>非线性</strong>组合,扩展到高维,然后在高维就可以实现区分,即<br>$$\phi(x_1,x_2)&#x3D;(z_1,z_2,z_3)&#x3D;(x_1,x_2,x_1^2+x_2^2)$$<br>而这样做的效果用下面一张图可以很好的体现出来<br>原<img src="/2023/01/26/machine-learning/machine2/image-20230126003317498.png" alt="png">本区分不开的两簇点通过扩展到三维很轻易地区分开来</p>
<h3 id="使用核方法在高维空间中找到决策边界"><a href="#使用核方法在高维空间中找到决策边界" class="headerlink" title="使用核方法在高维空间中找到决策边界"></a>使用核方法在高维空间中找到决策边界</h3><p>为了处理上述问题,我们首先需要利用一个投影函数$\phi$将训练数据投影到高维空间,然后再训练一个支持向量机模型,最后再将原本的投影函数取反来进行预测.</p>
<p>然而,这种方法说起来简单,但是实际运作起来(尤其是面对高维数据)非常困难,因此我们需要使用到<strong>核技巧</strong>(<code>kernel trick</code>),核技巧的数学原理再次不再过多涉及  </p>
<blockquote>
<p>核函数可以被看做给向量空间定义了一个全新的点乘<br>粗略地说,核这个词可以被理解为<strong>一对样本之间的关联函数</strong>,例如说最为常用的高斯核函数<code>Gaussian kernel</code>就是如下定义:<br>$$\mathcal{K}(x^{(i)},x^{(j)})&#x3D;exp\left(-\frac{||x^{(i)}-x^{(j)}||^2}{2\sigma^2}\right)$$<br>(其中的$\sigma$是一个拟合自由度)其得到样本中两个样本差距的模长,并且取$e$的负指数来实现定义两个样本之间的相近程度</p>
</blockquote>
<p>现在我们来看刚才的问题,我们来试试高斯核能不呢解决这个问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">svm=SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>,random_state=<span class="number">1</span>,gamma=<span class="number">0.1</span>,C=<span class="number">10</span>)</span><br><span class="line">svm.fit(X_xor,y_xor)</span><br><span class="line">plot_decision_regions(X_xor,y_xor,classifier=svm)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>




<p><img src="/2023/01/26/machine-learning/machine2/scikit-learn_46_1.png" alt="png"></p>
<p>而我们使用的$\gamma$参数,可以被理解为<strong>切断参数</strong>,$\gamma$越大,我们会得到一个越紧凑的决策边界,我们可以拿之前那个花分类的问题来进行讨论</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">svm=SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>,random_state=<span class="number">1</span>,gamma=<span class="number">0.2</span>,C=<span class="number">1.0</span>)</span><br><span class="line">svm.fit(X_train_std,ytrain)</span><br><span class="line">plot_decision_regions(X_train_std,ytrain,svm)</span><br><span class="line">plot_decision_regions(X_test_std,ytest,svm,test=<span class="literal">True</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>




<p><img src="/2023/01/26/machine-learning/machine2/scikit-learn_48_1.png" alt="png"></p>
<p>因为我们的$\gamma$值比较小,所以看起来还不错,接下来,我们把$\gamma$放大,看看会怎么样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">svm=SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>,random_state=<span class="number">1</span>,gamma=<span class="number">100</span>,C=<span class="number">1.0</span>)</span><br><span class="line">svm.fit(X_train_std,ytrain)</span><br><span class="line">plot_decision_regions(X_train_std,ytrain,svm)</span><br><span class="line">plot_decision_regions(X_test_std,ytest,svm,test=<span class="literal">True</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>




<p><img src="/2023/01/26/machine-learning/machine2/scikit-learn_50_1.png" alt="png"></p>
<p>虽然这种拟合在训练集上很有用,但是无法用在测试集上</p>
<blockquote>
<p>这样的东西,能不能做聚类</p>
</blockquote>
<h2 id="决策树学习"><a href="#决策树学习" class="headerlink" title="决策树学习"></a>决策树学习</h2><p>如果我们非常在乎可解释性的话,<strong>决策树</strong>(<code>Decision tree</code>)分类器是非常吸引人的模型,正如名字所预示的那样,我们可以考虑将数据通过做出一些决策而进行分解,以下面一个决定某一天是否要做某件事的决策树为例:<br><img src="/2023/01/26/machine-learning/machine2/image-20230126003438905.png" alt="png"><br>相似的,对于连续变化的数据,我们可以定义一个阈值来进行决策</p>
<p>在实际应用中,我们从树根开始,对于可以导致<strong>最大学习增加</strong>(<code>largest IG</code>)进行分类(这在之后会详细介绍),然后对每一个分支重复这个过程,直到树变得整洁</p>
<blockquote>
<p>然而这样做在实际情况下往往会导致过拟合,因此我们需要通过设定最大深度对树进行修剪</p>
</blockquote>
<h3 id="最大化信息增加"><a href="#最大化信息增加" class="headerlink" title="最大化信息增加"></a>最大化信息增加</h3><p>为了准确地分隔节点,我们需要定义一个最优化函数来处理决策树学习算法.在这里,我们决策树的目的是尽可能增加<strong>信息</strong>,信息量定义如下:<br>$$IG(D_p,f)&#x3D;I(D_p)-\sum_{j&#x3D;1}^m\frac{N_j}{N_p}I(D_j)$$<br>式中$f$是实行分割的特征,$D_p$和$D_j$是父节点对应数据集和第$j$个子节点数据集,而$I$就是我们的<strong>不纯</strong>度,我们可以看出,所谓信息的增加就是父节点和子节点不纯度和之差,子节点不纯度越小,信息量增加越大</p>
<blockquote>
<p>不过在实际使用过程中,为了简明起见,编译器往往会使用二分法进行分类</p>
</blockquote>
<p>现在我们来介绍经常被使用的三种不纯度的度量($t$为节点)</p>
<ol>
<li>基尼不纯度$I_G&#x3D;1-\sum p(i|t)^2$</li>
<li>信息熵$I_H&#x3D;-\sum p(i|t)\log_2p(i|t)$</li>
<li>分类误差$I_E&#x3D;1-\max{p(i|t)}$<br>1,2往往能够获得相似的结果,而3往往被用在修建上而非生长上</li>
</ol>
<p>下面这张图可以展现出三种度量方式的特性(对于二分类样本)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gini</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">return</span> p*(<span class="number">1</span>-p)+(<span class="number">1</span>-p)*(<span class="number">1</span>-(<span class="number">1</span>-p))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">entropy</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">return</span> -p*np.log2(p)-(<span class="number">1</span>-p)*np.log2(<span class="number">1</span>-p)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>-np.<span class="built_in">max</span>([p,<span class="number">1</span>-p],axis=<span class="number">0</span>)</span><br><span class="line">x=np.arange(<span class="number">0.001</span>,<span class="number">1</span>,<span class="number">0.01</span>)</span><br><span class="line">ent=entropy(x)</span><br><span class="line">sc_ent=ent*<span class="number">0.5</span></span><br><span class="line">err=error(x)</span><br><span class="line">fig=plt.figure()</span><br><span class="line">ax=plt.subplot(<span class="number">111</span>)</span><br><span class="line"><span class="keyword">for</span> i, lab, ls, c, <span class="keyword">in</span> <span class="built_in">zip</span>([ent, sc_ent, gini(x), err], </span><br><span class="line">    [<span class="string">&#x27;Entropy&#x27;</span>, <span class="string">&#x27;Entropy (scaled)&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;Gini Impurity&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;Misclassification Error&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;--&#x27;</span>, <span class="string">&#x27;-.&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;lightgray&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;cyan&#x27;</span>]):</span><br><span class="line">    line = ax.plot(x, i, label=lab, </span><br><span class="line">    linestyle=ls, lw=<span class="number">2</span>, color=c)</span><br><span class="line">ax.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">ax.axhline(y=<span class="number">0.5</span>,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">ax.axhline(y=<span class="number">1</span>,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">plt.xlim([<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">plt.xlabel(<span class="string">&#x27;p(i-1)&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Impurity Index&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/26/machine-learning/machine2/scikit-learn_54_0.png" alt="png"><br>​    </p>
<h3 id="构建一颗决策树"><a href="#构建一颗决策树" class="headerlink" title="构建一颗决策树"></a>构建一颗决策树</h3><p>我们可以借助<code>scikit-learn</code>来构建一棵决策树,我们在此训练一个最大深度为3的决策树,使用信息熵作为度量.</p>
<blockquote>
<p>需要注意到,虽然在可视化的时候进行数据预处理是好的,但是对于决策树而言,不需要进行数据缩放</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line">tree=DecisionTreeClassifier(criterion=<span class="string">&#x27;entropy&#x27;</span>,max_depth=<span class="number">4</span>,random_state=<span class="number">1</span>)</span><br><span class="line">tree.fit(Xtrain,ytrain)</span><br><span class="line">plot_decision_regions(Xtrain,ytrain,tree)</span><br><span class="line">plot_decision_regions(Xtest,ytest,tree,test=<span class="literal">True</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;petal length [cm]&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;petal width [cm]&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<pre><code>C:\Users\h\AppData\Local\Temp\ipykernel_43220\485392308.py:21: UserWarning: You passed a edgecolor/edgecolors (&#39;black&#39;) for an unfilled marker (&#39;x&#39;).  Matplotlib is ignoring the edgecolor in favor of the facecolor.  This behavior may change in the future.
  plt.scatter(x=X[y==cl,0],
C:\Users\h\AppData\Local\Temp\ipykernel_43220\485392308.py:21: UserWarning: You passed a edgecolor/edgecolors (&#39;black&#39;) for an unfilled marker (&#39;x&#39;).  Matplotlib is ignoring the edgecolor in favor of the facecolor.  This behavior may change in the future.
  plt.scatter(x=X[y==cl,0],
</code></pre>
<p><img src="/2023/01/26/machine-learning/machine2/scikit-learn_56_1.png" alt="png"></p>
<p>使用<code>scikit-learn</code>有一个很好的功能在于你可以将训练好的树保存为<code>.dot</code>文件,然后我们可以使用<code>pydotplus</code>库进行查看</p>
<blockquote>
<p>需要注意,我们需要安装<code>GraphViz</code>这样的程序</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! 添加GraphViz环境变量</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&quot;PATH&quot;</span>]+=os.pathsep+<span class="string">&#x27;C:/Program Files/Graphviz/bin&#x27;</span></span><br><span class="line"><span class="keyword">from</span> pydotplus <span class="keyword">import</span> graph_from_dot_data</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> export_graphviz</span><br><span class="line">dot_data=export_graphviz(tree,</span><br><span class="line">                         filled=<span class="literal">True</span>,</span><br><span class="line">                         rounded=<span class="literal">True</span>,</span><br><span class="line">                         class_names=[<span class="string">&#x27;Setosa&#x27;</span>,<span class="string">&#x27;Versicolor&#x27;</span>,<span class="string">&#x27;Virginica&#x27;</span>],</span><br><span class="line">                         feature_names=[<span class="string">&#x27;petal length&#x27;</span>,<span class="string">&#x27;petal width&#x27;</span>],</span><br><span class="line">                         out_file=<span class="literal">None</span>)</span><br><span class="line">graph=graph_from_dot_data(dot_data)</span><br><span class="line">graph.write_png(<span class="string">&#x27;tree.png&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>True
</code></pre>
<p>我们可以得到一个如下所示的结果<br><img src="/2023/01/26/machine-learning/machine2/tree.png" alt="png"></p>
<p>我们可以看到这中间的各种决策过程,这个决策树在区分花种类中可以做得很好</p>
<p>遗憾的是,<code>scikit-learn</code>库中并没有内置进行修剪的函数,我们需要修改之前的源代码</p>
<h3 id="使用随机森林法合并不同的决策树"><a href="#使用随机森林法合并不同的决策树" class="headerlink" title="使用随机森林法合并不同的决策树"></a>使用随机森林法合并不同的决策树</h3><p><strong>决策森林</strong>(<code>Random forests</code>)在机器学习中变得非常流行,随机森林可以被看作是一组决策树的集合,随机森林可以被总结为以下四步:</p>
<ol>
<li>从数据集中随机抽取$n$个样本(放回抽样)</li>
<li>从这$n$个样本中生长出一棵决策树,而在每一个样本中,有:<ul>
<li>随机选取$d$个特征</li>
<li>选取使用最能分割特征的节点进行分割</li>
</ul>
</li>
<li>重复这个过程$k$次</li>
<li>使用<em>绝对多数投票</em>合并这些树</li>
</ol>
<p>我们尤其需要注意在步骤2中是<strong>对部分特征进行生长</strong><br>虽然随机森林的结果不像决策树一样易于解读,但是相应的,其可以过滤掉很大一部分噪声,鲁棒性很高,我们只需要关心我们需要训练多少个树,而往往树越多,结果越为理想.</p>
<blockquote>
<p>当然,像$n$和$d$这样的的值也可以优化,但是在这里不加以过多赘述</p>
</blockquote>
<p>我们可以使用库来构建随机森林</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line">forest=RandomForestClassifier(criterion=<span class="string">&#x27;entropy&#x27;</span>,</span><br><span class="line">                              n_estimators=<span class="number">250</span>,</span><br><span class="line">                              random_state=<span class="number">1</span>,</span><br><span class="line">                              n_jobs=<span class="number">2</span>)</span><br><span class="line">forest.fit(Xtrain,ytrain)</span><br><span class="line">plot_decision_regions(Xtrain,ytrain,forest)</span><br><span class="line">plot_decision_regions(Xtest,ytest,forest,test=<span class="literal">True</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;petal length [cm]&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;petal width [cm]&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.show()                 </span><br></pre></td></tr></table></figure>




<p><img src="/2023/01/26/machine-learning/machine2/scikit-learn_62_1.png" alt="png"></p>
<p>虽然我们长的树很少,数据集也很小,但是我们修改了<code>n_jobs</code>来实现多线程运算</p>
<h2 id="第K近邻居–一种懒惰的学习算法"><a href="#第K近邻居–一种懒惰的学习算法" class="headerlink" title="第K近邻居–一种懒惰的学习算法"></a>第K近邻居–一种懒惰的学习算法</h2><p>我们最后要介绍的算法是KNN算法,这种算法非常有趣因为其采用了一种不同的方式进行学习</p>
<p>所谓<em>懒惰</em>不是因为其结构简单,而是因为其不从训练数据中学习区分函数,而是通过记住训练集的方式</p>
<blockquote>
<p>KNN属于一个典型的非参数模型<br>KNN算法自身是相当直截了当的,可以用以下几步来总结</p>
</blockquote>
<ol>
<li>选择数量$k$和距离矩阵</li>
<li>找到我们想要分类的$k$个邻居</li>
<li>使用绝对多数投票决定类标签<br>下图展示了一个新的数据点是如何拿KNN算法分类的<br><img src="attachment:image.png" alt="image.png"><br>这种方法的好处在于一旦我们添加新的数据,那么模型可以立即适应,然而,当训练数据非常大时,这一算法会变得<strong>非常慢</strong>  <blockquote>
<p>似乎不准确的抽样可能会对KNN带来权重<br>下面我们用KNN算法实践一下</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line">knn=KNeighborsClassifier(p=<span class="number">2</span>,metric=<span class="string">&#x27;minkowski&#x27;</span>)</span><br><span class="line">knn.fit(X_train_std,ytrain)</span><br><span class="line">plot_decision_regions(X_train_std,ytrain,knn)</span><br><span class="line">plot_decision_regions(X_test_std,ytest,knn,test=<span class="literal">True</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>




<p><img src="/2023/01/26/machine-learning/machine2/scikit-learn_65_1.png" alt="png"></p>
<p>在KNN中,选取合适的$k$尤为重要,同时也要选取一个合理的距离矩阵,例如我们刚才选用的<code>minkowski</code>矩阵,其形式如下:<br>$$d(x^{(i)},x^{(j)})&#x3D;\sqrt[p]{\sum_k |x^{(i)}_k-x^{(j)}_k|}$$<br>当$p&#x3D;2$,为欧几里得距离,当$p&#x3D;1$,为曼哈顿距离<br>可以参考<a href="http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.DistanceMetric.html">这个网页</a>  </p>
<blockquote>
<p>需要注意:当数据维度非常高时,KNN往往会给出过拟合的结果 :</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一章所涉及的机器学习算法的特点列举如下:</p>
<ol>
<li>Logistic回归相当于<code>Adaline</code>的一种改进,最为基本</li>
<li>支持向量机可以支持许多类型的核来处理非线性问题,但是其具有非常多的参数需要调节</li>
<li>决策树的结果易于解读,但是鲁棒性不如随机森林</li>
<li>KNN算法不依赖参数模型,但是当数据维度大时综合效果会显著下降</li>
</ol>
<h2 id="有待讨论的问题"><a href="#有待讨论的问题" class="headerlink" title="有待讨论的问题"></a>有待讨论的问题</h2><ol>
<li>关于logistic回归函数的意义</li>
<li>核的意义</li>
<li>修改logistic回归代码</li>
</ol>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>python</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>控制系统建模</title>
    <url>/2023/01/15/control%20system/control1/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>

<h2 id="描述控制系统"><a href="#描述控制系统" class="headerlink" title="描述控制系统"></a>描述控制系统</h2><p><code>在这一部分,假设$u(t)$为系统某一时刻的输入,$y(t)$为系统某一时刻的输出$t$为时间</code></p>
<p>利用递推法即$y_n&#x3D;\Sigma f(y_k)+g(u_n)$,我们可以得到一个齐次线性微分方程描述输出和输入之间的关系<br>$$\Sigma_k^n\frac{\mathbb{d}^k}{\mathbb{d}t^k}a_ky(t)&#x3D;\Sigma_i^n\frac{\mathbb{d}^i}{\mathbb{d}t^i}b_ku(t)$$</p>
<blockquote>
<p>对于一些特殊情况,例如系统的状态与其历史无关,那么系统可以被简化为$y(t)&#x3D;b_0u(t)$<br>下面将对一个常见模型进行建模</p>
</blockquote>
<span id="more"></span>


<hr>
<h3 id="垂直驱动机械臂模型"><a href="#垂直驱动机械臂模型" class="headerlink" title="垂直驱动机械臂模型"></a>垂直驱动机械臂模型</h3><p>$$J\ddot{\theta}(t)+\mu\dot{\theta}(t)+Mgl\sin \theta(t)&#x3D;u(t)$$<br><code>臂转动惯量为$J$,质量为$M$,重力加速度为$g$,考虑阻尼作用,整体外部扭矩被表示为$u$</code><br>但是这不是一个线性微分方程(由于$\sin$的存在),因此我们可以对$\theta$进行小角度假设,那么就可以得到一个线性微分方程</p>
<p>$$J\ddot{\theta}(t)+\mu\dot{\theta}(t)+Mgl\theta(t)&#x3D;u(t)$$</p>
<h3 id="控制工程所使用的模型描述"><a href="#控制工程所使用的模型描述" class="headerlink" title="控制工程所使用的模型描述"></a>控制工程所使用的模型描述</h3><p>由于微分方程往往很高阶,因此直接分析会非常困难.<br>将微分方程转换为”传递函数模型”或者是”状态方程模型”</p>
<h2 id="传递函数模型"><a href="#传递函数模型" class="headerlink" title="传递函数模型"></a>传递函数模型</h2><p>传递函数模型形式$\mathcal{P}(s)&#x3D;\frac{\Sigma^m_k b_ks^k}{\Sigma^n_i b_is^i}$<br>利用这种模型,可以将在时间域上的微积分操作转化为在$s$上的乘法操作,例如说$$\dot{y(t)}\to sy(s)$$<br>$\mathcal{P}(s)&#x3D;\frac{y(s)}{u(s)}$其中$y(s)&#x3D;\mathcal{L}[y(t)],u(s)&#x3D;\mathcal{L}[u(t)]$</p>
<blockquote>
<p>拉普拉斯变换$\mathcal{L}$,定义$$g(s)&#x3D;\mathcal{L}[g(t)]:&#x3D;\int_0^\infin g(t)e^{-st}\mathbb{d}t$$<br>对其进行$N$次积分相当于除以$s^N$,微分则相反</p>
</blockquote>
<h3 id="传递函数举例"><a href="#传递函数举例" class="headerlink" title="传递函数举例"></a>传递函数举例</h3><p>对于之前的机械臂模型,我们可以将传递函数写作<br>$$\mathcal{P}(s)&#x3D;\frac{1}{s^2J+\mu s+Mgl}$$<br>也可以利用Python中的(<code>tf</code>)函数来表示,例如我们现在有一个控制函数<br>$$\mathcal{P}(s)&#x3D;\frac{1}{s^2+2s+3}$$<br>可以用以下代码表示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> control</span><br><span class="line">np=[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">dp=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">p=control.tf(np,dp)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br></pre></td></tr></table></figure>


<pre><code>      1
-------------
s^2 + 2 s + 3
</code></pre>
<p>​    </p>
<p>或者像这样$$\mathcal{P}(s)&#x3D;\frac{s+2}{(s+1)(s+2)^2}$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(control.tf([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>])*control.tf([<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>])**<span class="number">2</span>)</span><br></pre></td></tr></table></figure>


<pre><code>        s + 2
---------------------
s^3 + 5 s^2 + 8 s + 4
</code></pre>
<p>​    </p>
<p>可以利用(<code>tfdata</code>)重新获取分母和分子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[nump]],[[denp]]=control.tfdata(p)</span><br><span class="line"><span class="built_in">print</span>(nump,denp)</span><br></pre></td></tr></table></figure>

<pre><code>[1] [1 2 3]
</code></pre>
<h2 id="状态空间模型"><a href="#状态空间模型" class="headerlink" title="状态空间模型"></a>状态空间模型</h2><p>状态空间模型可以<strong>将多元高阶微分方程表示为一阶微分方程的形式</strong><br>通常可以编写为两个(两组)方程<br>$$<br>\dot{x}(t)&#x3D;Ax(t)+Bu(t)\qquad (状态方程)<br>$$<br>和<br>$$<br>y(t)&#x3D;Cx(t)+Du(t)\qquad (输出方程)<br>$$<br>需要注意的是,$ABCD$都可以是矩阵,$xyu$都可以是矢量,但是我们主要考虑单输入单输出情况(但是$x$可能还是矢量)</p>
<blockquote>
<p>如何建模?<br>考虑$p&#x3D;\frac{\mathbb{d}}{\mathbb{d}t}$,那么可以假设$p$的多项式$A(p)$和$B(p)$,于是我们就可以定义一个新变量$v$,有<br>$A(p)&#x3D;u,y&#x3D;B(p)v$<br>可以定义$x$向量为$v$的各阶导数,就可以写出原来的方程</p>
</blockquote>
<h3 id="机械臂的状态空间模型"><a href="#机械臂的状态空间模型" class="headerlink" title="机械臂的状态空间模型"></a>机械臂的状态空间模型</h3><p>下面以之前的机械臂为例,讨论一下状态空间模型的推导<br>由于机械臂运动状态由角度和角速度确定,因此$x&#x3D;\left[\begin{matrix}\theta\\dot{\theta}\end{matrix}\right]$,然后其状态方程为<br>$$\dot{x}(t)&#x3D;\left[\begin{matrix}\dot{\theta}\\ddot{\theta}\end{matrix}\right]&#x3D;\left[\begin{matrix}0&amp;1\-\frac{Mgl}{J}&amp;-\frac{\mu}{J}\end{matrix}\right]x(t)+\left[\begin{matrix}0\\frac{1}{J}\end{matrix}\right]u(t)$$<br>输出方程为<br>$$y(t)&#x3D;\left[\begin{matrix}1&amp;0\end{matrix}\right]x(t)$$</p>
<h3 id="状态空间模型的Python代码"><a href="#状态空间模型的Python代码" class="headerlink" title="状态空间模型的Python代码"></a>状态空间模型的Python代码</h3><p>可以使用函数<code>ss(A,B,C,D)</code>表示状态空间,非常方便,例如对于一组方程<br>$$\dot{x}(t)&#x3D;\left[\begin{matrix}1&amp;1&amp;2\2&amp;1&amp;1\3&amp;4&amp;5\end{matrix}\right]x(t)+\left[\begin{matrix}2\0\1\end{matrix}\right]u(t)$$<br>$$y(t)&#x3D;\left[\begin{matrix}1&amp;1&amp;0\end{matrix}\right]x(t)+u(t)$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;1 1 2;2 1 1;3 4 5&quot;</span></span><br><span class="line">b=<span class="string">&quot;2;0;1&quot;</span></span><br><span class="line">c=<span class="string">&quot;1 1 0&quot;</span></span><br><span class="line">d=<span class="string">&quot;1&quot;</span></span><br><span class="line">control.ss(a,b,c,d).A</span><br></pre></td></tr></table></figure>




<pre><code>array([[1., 1., 2.],
       [2., 1., 1.],
       [3., 4., 5.]])
</code></pre>
<h2 id="框图"><a href="#框图" class="headerlink" title="框图"></a>框图</h2><p>可以利用框图来描述控制系统</p>
<h3 id="串联"><a href="#串联" class="headerlink" title="串联"></a>串联</h3><p>将两个系统输入输出相连,可以得到一个串联的系统,例如将$y&#x3D;\mathcal{S_1}u$与$z&#x3D;\mathcal{S_2}y$串联后就得到$z&#x3D;\mathcal{S_1}\cdot\mathcal{S_2}u$<br>系统可以表示为$$\mathcal{S&#x3D;S_1\cdot S_2}$$<br>这一结果不满足交换律,框图如下所示<br>可以使用Python求得系统中串联的结果模型:</p>
<blockquote>
<p>需要注意如果使用乘法,那么后作用的系统在前(参考矩阵),反之则是先作用的系统在前</p>
</blockquote>
<h3 id="并联"><a href="#并联" class="headerlink" title="并联"></a>并联</h3><p>将输入分别通过两个过程再叠加(略)</p>
<h3 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h3><p>当一个的输出再通过某些形式返回,就构成了反馈系统.例如在一个反馈系统中<br>$$y&#x3D;\mathcal{S_1}r-\mathcal{S_2}y$$<br>那么这个反馈系统可以被化简为<br>$$y&#x3D;\mathcal{S}r\qquad \mathcal{S}&#x3D;\frac{\mathcal{S_1}}{1+\mathcal{S_1S_2}}$$</p>
<blockquote>
<p>可以利用<code>feedback</code>实现反馈</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=control.tf([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">s2=control.tf([<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">s=control.series(s1,s2)</span><br><span class="line">s</span><br></pre></td></tr></table></figure>




<p>$$\frac{s + 1}{s^3 + 2 s^2 + 2 s + 1}$$</p>
]]></content>
      <categories>
        <category>Python设计控制系统</category>
      </categories>
      <tags>
        <tag>控制系统</tag>
      </tags>
  </entry>
  <entry>
    <title>被控对象的行为</title>
    <url>/2023/01/15/control%20system/control2/</url>
    <content><![CDATA[<h1 id="被控对象的行为"><a href="#被控对象的行为" class="headerlink" title="被控对象的行为"></a>被控对象的行为</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>为了更加方便地绘制相关图像,在这里要进行相应的准备工作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> control <span class="keyword">as</span> ct </span><br><span class="line"><span class="keyword">from</span> control.matlab <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>

<p>绘图时用以确定线条类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">line_generator</span>():</span><br><span class="line">    linestyle=[<span class="string">&quot;-&quot;</span>,<span class="string">&quot;--&quot;</span>,<span class="string">&quot;-.&quot;</span>,<span class="string">&quot;:&quot;</span>]</span><br><span class="line">    lineid=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> linestyle[lineid] <span class="comment">#* 这个yield用法很有趣,可以学习一下</span></span><br><span class="line">        lineid=(lineid+<span class="number">1</span>)%<span class="built_in">len</span>(linestyle)</span><br></pre></td></tr></table></figure>

<p>用以完善绘图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_set</span>(<span class="params">fig_ax,*args</span>):</span><br><span class="line">    fig_ax.set_xlabel(args[<span class="number">0</span>])</span><br><span class="line">    fig_ax.set_ylabel(args[<span class="number">1</span>])</span><br><span class="line">    fig_ax.grid(ls=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args)==<span class="number">3</span>:</span><br><span class="line">        fig_ax.legend(loc=args[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>用以完善伯德图函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bodeplot_set</span>(<span class="params">fig_ax,*args</span>):</span><br><span class="line">    fig_ax[<span class="number">0</span>].grid(which=<span class="string">&#x27;both&#x27;</span>,ls=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    fig_ax[<span class="number">0</span>].set_ylabel(<span class="string">&#x27;Gain [dB]&#x27;</span>)</span><br><span class="line">    fig_ax[<span class="number">1</span>].grid(which=<span class="string">&#x27;both&#x27;</span>,ls=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    fig_ax[<span class="number">1</span>].set_xlabel(<span class="string">&#x27;$\omega$ [rad/s]&#x27;</span>)</span><br><span class="line">    fig_ax[<span class="number">1</span>].set_ylabel(<span class="string">&#x27;Phase [deg]&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args)&gt;<span class="number">0</span>:</span><br><span class="line">        fig_ax[<span class="number">1</span>].legend(loc=args[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args)&gt;<span class="number">1</span>:</span><br><span class="line">        fig_ax[<span class="number">0</span>].legend(loc=args[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<h2 id="时域响应"><a href="#时域响应" class="headerlink" title="时域响应"></a>时域响应</h2><span id="more"></span>

<p>在这一部分,我们选取常见的阶跃函数<code>step</code>对于一阶和二阶的滞后系统进行描述</p>
<h3 id="一阶滞后系统"><a href="#一阶滞后系统" class="headerlink" title="一阶滞后系统"></a>一阶滞后系统</h3><p>之前用来描述有阻尼手推车系统的传递函数的传递函数为<br>$$\mathcal{P}(s)&#x3D;\frac{\frac{1}{\mu}}{1+\frac{M}{\mu}s}$$<br>可以将$\frac{1}{\mu}$简化为增益$K$,$\frac{M}{\mu}$简化为时间常数$T$,<br>这一类系统的阶跃响应可以被表示为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ts,k=<span class="number">0.5</span>,<span class="number">1</span></span><br><span class="line">p=tf([<span class="number">0</span>,k],[ts,<span class="number">1</span>])</span><br><span class="line">y,t=step(p,np.linspace(<span class="number">0</span>,<span class="number">5</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line">ax.plot(t,y)</span><br><span class="line">plot_set(ax,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/15/control%20system/control2/output_11_0.png" alt="png"><br>​    </p>
<p>其中,我们需要注意到,$T$代表系统达到稳定值的63.2%所需要的时间.<br>下面展示了在不同的$T$下系统的变化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls=line_generator()</span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line"></span><br><span class="line">k=<span class="number">1</span></span><br><span class="line">tl=[<span class="number">0.1</span>,<span class="number">0.5</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> tt <span class="keyword">in</span> tl:</span><br><span class="line">    p=tf([<span class="number">0</span>,k],[tt,<span class="number">1</span>])</span><br><span class="line">    y,t=step(p,np.linspace(<span class="number">0</span>,<span class="number">5</span>,<span class="number">100</span>))</span><br><span class="line">    ax.plot(t,y,<span class="built_in">next</span>(ls),label=<span class="string">&quot;T=&quot;</span>+<span class="built_in">str</span>(tt))</span><br><span class="line">plot_set(ax,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;best&quot;</span>)</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/15/control%20system/control2/output_13_0.png" alt="png"><br>​    </p>
<p>可以明显看出$T$越大,达到平衡就越慢,$K$为增益,在这里不再加以演示了</p>
<h3 id="二阶滞后系统"><a href="#二阶滞后系统" class="headerlink" title="二阶滞后系统"></a>二阶滞后系统</h3><p>如果考量一个阻尼弹簧的模型,我们可以得到其传递模型为<br>$$\mathcal{P}(s)&#x3D;\frac{\omega_n^2}{s^2+2\zeta\omega_ns+\omega_n^2}$$<br>式中$\zeta$被称为阻尼系数,$\omega_n$被称为无阻尼自然频率.<br>这样的系统被称为<strong>二阶滞后系统</strong></p>
<blockquote>
<p>实际上就是阻尼振动(LCR振荡的模型)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zeta,omega0=<span class="number">0.4</span>,<span class="number">5</span></span><br><span class="line">p=tf([<span class="number">0</span>,omega0**<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>*zeta*omega0,omega0**<span class="number">2</span>])</span><br><span class="line">y,t=step(p,np.linspace(<span class="number">0</span>,<span class="number">5</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line">ax.plot(t,y)</span><br><span class="line">plot_set(ax,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;y&quot;</span>)</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/15/control%20system/control2/output_16_0.png" alt="png"><br>​    </p>
<p>可以注意到响应图象呈现先增大后减小(中间存在过冲)<strong>过冲</strong>在二阶滞后系统时有发生.<br>下面展现出过冲在不同的阻尼系数下的表现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls=line_generator()</span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line"></span><br><span class="line">omega=<span class="number">5</span></span><br><span class="line">beta=[<span class="number">0.3</span>,<span class="number">0.5</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> tt <span class="keyword">in</span> beta:</span><br><span class="line">    p=tf([<span class="number">0</span>,omega**<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>*tt*omega,omega**<span class="number">2</span>])</span><br><span class="line">    y,t=step(p,np.linspace(<span class="number">0</span>,<span class="number">5</span>,<span class="number">100</span>))</span><br><span class="line">    ax.plot(t,y,<span class="built_in">next</span>(ls),label=<span class="string">&quot;$\zeta$=&quot;</span>+<span class="built_in">str</span>(tt))</span><br><span class="line">plot_set(ax,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;best&quot;</span>)</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/15/control%20system/control2/output_18_0.png" alt="png"><br>​    </p>
<p>可以注意到随着$\zeta$增加,过冲逐渐减小,乃至消失,而不同的$\omega_n$的影响可以如下图所示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls=line_generator()</span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line"></span><br><span class="line">omegas=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>]</span><br><span class="line">tt=<span class="number">0.3</span></span><br><span class="line"><span class="keyword">for</span> omega <span class="keyword">in</span> omegas:</span><br><span class="line">    p=tf([<span class="number">0</span>,omega**<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>*tt*omega,omega**<span class="number">2</span>])</span><br><span class="line">    y,t=step(p,np.linspace(<span class="number">0</span>,<span class="number">5</span>,<span class="number">100</span>))</span><br><span class="line">    ax.plot(t,y,<span class="built_in">next</span>(ls),label=<span class="string">&quot;$\omega_n$=&quot;</span>+<span class="built_in">str</span>(omega))</span><br><span class="line">plot_set(ax,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;best&quot;</span>)</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/15/control%20system/control2/output_20_0.png" alt="png"><br>​    </p>
<p>可见$\omega_n$不会改变响应的大小,只会改变响应速度</p>
<blockquote>
<p>下面展现了一个高阶响应系统的阶跃响应</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p=tf([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>])</span><br><span class="line">y,t=step(p,np.linspace(<span class="number">0</span>,<span class="number">5</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line">ax.plot(t,y)</span><br><span class="line">plot_set(ax,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;y&quot;</span>)</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/15/control%20system/control2/output_23_0.png" alt="png"><br>​    </p>
<h2 id="状态空间模型的时域响应"><a href="#状态空间模型的时域响应" class="headerlink" title="状态空间模型的时域响应"></a>状态空间模型的时域响应</h2><p>在状态空间模型中,我们还会考虑不同的初始值会给出什么样不同的结果</p>
<blockquote>
<p>状态空间模型(单输入,单输出)定义<br>$$\mathbf{\dot{x}}(t)&#x3D;\mathrm{A}\mathbf{x}(t)+\mathbf{B}u(t)$$<br>$$y(t)&#x3D;\mathrm{C}\mathbf{x}(t)+Du(t)$$<br>我们考虑一个系统,其中$A&#x3D;\left[\begin{matrix}0&amp;1\-4&amp;-5\end{matrix}\right],B&#x3D;\left[\begin{matrix}0\1\end{matrix}\right],C&#x3D;\left[\begin{matrix}1&amp;0\0&amp;1\end{matrix}\right],D&#x3D;\left[\begin{matrix}0\0\end{matrix}\right]$,为了便于观察中间状态的行为,将$C$设定为单位阵<br>而在Python中,可以利用<code>initial</code>函数获得系统对于初值的响应</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A=[[<span class="number">0</span>,<span class="number">1</span>],[-<span class="number">4</span>,-<span class="number">0.5</span>]]</span><br><span class="line">B=[[<span class="number">0</span>],[<span class="number">1</span>]]</span><br><span class="line">C=[[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">D=[[<span class="number">0</span>],[<span class="number">0</span>]]</span><br><span class="line">P=ss(A,B,C,D)</span><br><span class="line">x0=[-<span class="number">0.3</span>,<span class="number">0.4</span>]</span><br><span class="line">x,t=initial(P,np.linspace(<span class="number">0</span>,<span class="number">30</span>,<span class="number">1000</span>),x0)</span><br><span class="line"></span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line">ax.plot(t,x[:,<span class="number">0</span>],label=<span class="string">&#x27;$x_1$&#x27;</span>)</span><br><span class="line">ax.plot(t,x[:,<span class="number">1</span>],<span class="string">&#x27;-.&#x27;</span>,label=<span class="string">&#x27;$x_2$&#x27;</span>)</span><br><span class="line">plot_set(ax,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&#x27;best&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/15/control%20system/control2/output_25_0.png" alt="png"><br>​    </p>
<p>可以注意到,两个状态(分别对应于阻尼运动的位置和速度)最终都会趋向0,这是阻尼运动的特征<br>对于一个微分方程$\dot{x}(t)&#x3D;ax(t)$,其具有解$x(t)&#x3D;e^{at}x(0)$,而将$a$替换为矩阵$\mathrm{A}$可以得到状态方程的解为<br>$$\mathbf{x}(t)&#x3D;e^{\mathrm{A}t}\mathbf{x}(0)$$<br>如果可以计算出这个指数,那么就可以得到状态方程的行为特征</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.linalg</span><br><span class="line">mA=np.array(A)</span><br><span class="line">t=<span class="number">10</span></span><br><span class="line">scipy.linalg.expm(mA*t)</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 0.05345953,  0.03466486],
       [-0.13865943,  0.0361271 ]])
</code></pre>
<p>接下来我们考虑具有输入的情况,利用下面的求解公式<br>$$\mathrm{x}(t)&#x3D;e^{\mathrm{A}t}\mathrm{x}(0)+\int_0^te^{\mathrm{A}(t-t_s)}\mathrm{B}u(t_s)\mathrm{d}t_s$$<br>其中右边第一项为<strong>零输入响应</strong>,第二项为<strong>零初值响应</strong><br>接下来来看一下之前函数$x&#x3D;\left[\begin{matrix}0\0\end{matrix}\right]$时的零初值响应,输入为阶跃输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Td=np.linspace(<span class="number">0</span>,<span class="number">20</span>,<span class="number">1000</span>)</span><br><span class="line">x,t=step(P,Td)</span><br><span class="line"></span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line">ax.plot(t,x[:,<span class="number">0</span>],label=<span class="string">&quot;$x_1$&quot;</span>)</span><br><span class="line">ax.plot(t,x[:,<span class="number">1</span>],ls=<span class="string">&quot;-.&quot;</span>,label=<span class="string">&quot;$x_2$&quot;</span>)</span><br><span class="line">plot_set(ax,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&#x27;best&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/15/control%20system/control2/output_29_0.png" alt="png"><br>​    </p>
<p>我们可以进一步将之前的零输入响应添加进去,只要将两者相加即可,或者使用<code>lsim</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Td=np.linspace(<span class="number">0</span>,<span class="number">20</span>,<span class="number">1000</span>)</span><br><span class="line">x1,t=step(P,Td)</span><br><span class="line">x2,t=initial(P,Td,[<span class="number">0.3</span>,-<span class="number">0.4</span>])</span><br><span class="line">x=x1[...,<span class="number">0</span>]+x2</span><br><span class="line"></span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line">ax.plot(t,x[:,<span class="number">0</span>],label=<span class="string">&quot;$x_1$&quot;</span>)</span><br><span class="line">ax.plot(t,x[:,<span class="number">1</span>],ls=<span class="string">&quot;-.&quot;</span>,label=<span class="string">&quot;$x_2$&quot;</span>)</span><br><span class="line">plot_set(ax,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&#x27;best&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/15/control%20system/control2/output_31_0.png" alt="png"><br>​    </p>
<p>下面我们可以稍稍修改一下代码,实现$u(t)&#x3D;3\sin 5t,x(0)&#x3D;[0.5,1]^T$时系统响应</p>
<blockquote>
<p>对于一般的响应,建议还是使用<code>lsim</code>实现</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Td=np.linspace(<span class="number">0</span>,<span class="number">20</span>,<span class="number">1000</span>)</span><br><span class="line">x1=<span class="number">3</span>*np.sin(<span class="number">5</span>*Td)</span><br><span class="line">x2,t=initial(P,Td,[<span class="number">0.5</span>,<span class="number">1</span>])</span><br><span class="line">x,_,_=lsim(P,x1,Td,[<span class="number">0.5</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line">ax.plot(t,x[:,<span class="number">0</span>],label=<span class="string">&quot;$x_1$&quot;</span>)</span><br><span class="line">ax.plot(t,x[:,<span class="number">1</span>],ls=<span class="string">&quot;-.&quot;</span>,label=<span class="string">&quot;$x_2$&quot;</span>)</span><br><span class="line">plot_set(ax,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&#x27;best&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/15/control%20system/control2/output_33_0.png" alt="png"><br>​    </p>
<h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>在研究系统工作时,我们发现一部分值可能会导致系统发散,即系统<strong>不稳定</strong>,我们需要研究系统的稳定性取决于哪些因素 </p>
<h3 id="输入输出稳定性"><a href="#输入输出稳定性" class="headerlink" title="输入输出稳定性"></a>输入输出稳定性</h3><p>如果输入信号有界,输出也有界,这种情况被称作<strong>输入输出稳定(BIBO稳定)</strong>  </p>
<blockquote>
<p>判断不稳定的方法<br>观察传递函数$\mathcal{P}(s)$的极点(其中代数式达到无穷的情况)<br>在python中可以使用<code>pole</code>函数寻找到传递函数的极点</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P1=tf([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;P1:&quot;</span>,pole(P1))</span><br></pre></td></tr></table></figure>

<pre><code>P1: [-1.+0.j]
</code></pre>
<p>接下来看看二阶滞后函数中$K&#x3D;1,\omega_n&#x3D;1,\zeta&#x3D;0.025$时的传递函数的极点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P2=tf([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0.05</span>,<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;P2:&quot;</span>,pole(P2))</span><br></pre></td></tr></table></figure>

<pre><code>P2: [-0.025+0.99968745j -0.025-0.99968745j]
</code></pre>
<p><em><strong>系统处于输入输出稳定条件为:传递函数的所有极点实部均为负数</strong></em><br>实部为负值的极点为<strong>稳定极点</strong>,否则为<strong>不稳定极点</strong></p>
<h3 id="渐进稳定性"><a href="#渐进稳定性" class="headerlink" title="渐进稳定性"></a>渐进稳定性</h3><p>前面介绍的是相对于传递函数而言的,现在讨论状态空间模型,可以通过观察系统的A矩阵的<strong>特征值</strong>实现对稳定性的观测,则有:<br><em><strong>系统稳定的充分必要条件:矩阵A所有特征值的实部均为负数</strong></em></p>
<p>但是同时需要注意到的是这里的稳定性具有<strong>渐进</strong>的特性即<br>$$\lim_{t\to\infin}x(t)&#x3D;0$$<br>如果具有渐进稳定性,那么对于有界输入,存在有界输出(<strong>逆命题不成立</strong>)</p>
<p>使用<code>np.linalg.eigvals</code>可以求得矩阵的特征值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A=np.array([[<span class="number">0</span>,<span class="number">1</span>],[-<span class="number">4</span>,-<span class="number">5</span>]])</span><br><span class="line">np.linalg.eigvals(A)</span><br></pre></td></tr></table></figure>




<pre><code>array([-1., -4.])
</code></pre>
<p>而通过绘制相平面图(即状态$x$的演化轨迹)如下代码所示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_phase</span>(<span class="params">matA,w=<span class="number">1.5</span></span>):</span><br><span class="line">    Y,X=np.mgrid[-w:w:<span class="number">100j</span>,-w:w:<span class="number">100j</span>]</span><br><span class="line">    s,v=np.linalg.eig(matA)</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">    U=matA[<span class="number">0</span>,<span class="number">0</span>]*X+matA[<span class="number">0</span>,<span class="number">1</span>]*Y</span><br><span class="line">    V=matA[<span class="number">1</span>,<span class="number">0</span>]*X+matA[<span class="number">1</span>,<span class="number">1</span>]*Y</span><br><span class="line"></span><br><span class="line">    t=np.arange(-k,k,<span class="number">0.01</span>)</span><br><span class="line">    fig,ax=plt.subplots()</span><br><span class="line">    <span class="keyword">if</span> s.imag[<span class="number">0</span>]==<span class="number">0</span> <span class="keyword">and</span> s.imag[<span class="number">1</span>]==<span class="number">0</span>:</span><br><span class="line">        ax.plot(t,(v[<span class="number">1</span>,<span class="number">0</span>]/v[<span class="number">0</span>,<span class="number">0</span>])*t,ls=<span class="string">&quot;-&quot;</span>)</span><br><span class="line">        ax.plot(t,(v[<span class="number">1</span>,<span class="number">1</span>]/v[<span class="number">0</span>,<span class="number">1</span>])*t,ls=<span class="string">&quot;-&quot;</span>)</span><br><span class="line">    ax.streamplot(X,Y,U,V,density=<span class="number">0.7</span>,color=<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">    plot_set(ax,<span class="string">&#x27;$x_1$&#x27;</span>,<span class="string">&#x27;$x_2&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>先来刚刚那个矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">make_phase(A,w=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<pre><code>[-1. -4.]
</code></pre>
<p><img src="/2023/01/15/control%20system/control2/output_45_1.png" alt="png"></p>
<p>可以注意到,所有的箭头都指向不动线的,下面展示如果特征值大于零会如何</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">make_phase(np.array([[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">4</span>]]),w=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<pre><code>[-0.23606798  4.23606798]
</code></pre>
<p><img src="/2023/01/15/control%20system/control2/output_47_1.png" alt="png"></p>
<p>还有没有实数特征值的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">make_phase(np.array([[np.cos(<span class="number">0.5</span>),np.sin(<span class="number">0.5</span>)],[-np.sin(<span class="number">0.5</span>),np.cos(<span class="number">0.5</span>)]]),w=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<pre><code>[0.87758256+0.47942554j 0.87758256-0.47942554j]
</code></pre>
<p><img src="/2023/01/15/control%20system/control2/output_49_1.png" alt="png"></p>
<p>这些极点和系统行为密切相关,若极点负值越大,那么<strong>响应越迅速</strong></p>
<p>当极点的虚部不为零时,会出现振荡,虚部越大<strong>振荡越快</strong></p>
<p>观察实部,可以得到振荡<strong>振幅</strong>;观察虚部,可以得到振荡<strong>周期</strong></p>
<h2 id="频域响应"><a href="#频域响应" class="headerlink" title="频域响应"></a>频域响应</h2><p>当输入为<strong>冲激输入</strong>(函数形式为$\delta$函数)时,系统的响应就是传递函数,因此只需要对施加冲激输入后的系统响应进行拉普拉斯变换就可以得到传递函数</p>
<p>但是在现实状况下,实现冲激输入非常困难,因此我们需要对信号进行傅里叶变换,研究输入输出的频域响应得到结果</p>
<p>我们可以观察二阶滞后系统在输入正弦波时的响应</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig,ax=plt.subplots(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">zeta=<span class="number">0.7</span></span><br><span class="line">omega_n=<span class="number">5</span></span><br><span class="line">P=tf([<span class="number">0</span>,omega_n**<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>*zeta*omega_n,omega_n**<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">freq=[<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>]</span><br><span class="line">Td=np.linspace(<span class="number">0</span>,<span class="number">5</span>,<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        u=np.sin(freq[<span class="number">2</span>*i+j]*Td)</span><br><span class="line">        y,t,x0=lsim(P,u,Td,<span class="number">0</span>)</span><br><span class="line">        ax[i,j].plot(t,u,ls=<span class="string">&#x27;--&#x27;</span>,label=<span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">        ax[i,j].plot(t,y,label=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">        plot_set(ax[i,j],<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u,y&#x27;</span>)</span><br><span class="line">ax[<span class="number">0</span>,<span class="number">0</span>].legend()</span><br></pre></td></tr></table></figure>

<pre><code>C:\Users\h\AppData\Roaming\Python\Python39\site-packages\control\timeresp.py:935: UserWarning: return_x specified for a transfer function system. Internal conversion to state space used; results may meaningless.
  warnings.warn(
C:\Users\h\AppData\Roaming\Python\Python39\site-packages\control\timeresp.py:935: UserWarning: return_x specified for a transfer function system. Internal conversion to state space used; results may meaningless.
  warnings.warn(
C:\Users\h\AppData\Roaming\Python\Python39\site-packages\control\timeresp.py:935: UserWarning: return_x specified for a transfer function system. Internal conversion to state space used; results may meaningless.
  warnings.warn(
C:\Users\h\AppData\Roaming\Python\Python39\site-packages\control\timeresp.py:935: UserWarning: return_x specified for a transfer function system. Internal conversion to state space used; results may meaningless.
  warnings.warn(





&lt;matplotlib.legend.Legend at 0x1aa4e6be160&gt;
</code></pre>
<p>​<br><img src="/2023/01/15/control%20system/control2/output_53_2.png" alt="png"><br>​    </p>
<p>可以注意到随着频率逐渐增大,振幅逐渐减小,同时相位的滞后就会比较大</p>
<p>对于各个频率,振幅比以$20\log_10\frac{B(\omega)}{A}$(分贝,dB)表示,绘制出图象为幅频图<br>将相位(deg)绘出的图形称为相频图,两者合称伯德图</p>
<blockquote>
<p>可以使用<code>bode</code>获得伯德图(记得转换)</p>
</blockquote>
<h3 id="一阶滞后系统的频域响应"><a href="#一阶滞后系统的频域响应" class="headerlink" title="一阶滞后系统的频域响应"></a>一阶滞后系统的频域响应</h3><p>下面我们来研究一阶滞后系统的伯德图,我们分别取时间常数$T&#x3D;1,0.5,0.1$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">K=<span class="number">1</span></span><br><span class="line">T=[<span class="number">1</span>,<span class="number">0.5</span>,<span class="number">0.1</span>]</span><br><span class="line">Ls=line_generator()</span><br><span class="line">fig,ax=plt.subplots(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(T)):</span><br><span class="line">    P=tf([<span class="number">0</span>,K],[T[i],<span class="number">1</span>])</span><br><span class="line">    gain,phase,w=bode(P,logspace(-<span class="number">2</span>,<span class="number">2</span>),Plot=<span class="literal">False</span>)</span><br><span class="line">    pltargs=&#123;<span class="string">&#x27;ls&#x27;</span>:<span class="built_in">next</span>(Ls),<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;T=&#x27;</span>+<span class="built_in">str</span>(T[i])&#125;</span><br><span class="line">    ax[<span class="number">0</span>].semilogx(w,<span class="number">20</span>*np.log10(gain),**pltargs)</span><br><span class="line">    ax[<span class="number">1</span>].semilogx(w,phase*<span class="number">180</span>/np.pi,**pltargs)</span><br><span class="line">bodeplot_set(ax,<span class="number">3</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<pre><code>C:\Users\h\AppData\Roaming\Python\Python39\site-packages\control\freqplot.py:187: FutureWarning: &#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;
  warnings.warn(&quot;&#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;&quot;,
C:\Users\h\AppData\Roaming\Python\Python39\site-packages\control\freqplot.py:187: FutureWarning: &#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;
  warnings.warn(&quot;&#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;&quot;,
C:\Users\h\AppData\Roaming\Python\Python39\site-packages\control\freqplot.py:187: FutureWarning: &#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;
  warnings.warn(&quot;&#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;&quot;,
</code></pre>
<p><img src="/2023/01/15/control%20system/control2/output_56_1.png" alt="png"></p>
<p>可以注意到,随着频率的提高,输出信号会发生衰减和相移,时间常数$T$越大,衰减和相移越为明显</p>
<blockquote>
<p>这很好理解,时间常数越大,代表响应越慢,自然衰减和相移就大  </p>
</blockquote>
<p>一般可以认为,在$\frac{1}{T}$的范围之内,输入信号振幅与输出信号相似(此时相移45°)</p>
<h2 id="二阶滞后系统的频域响应"><a href="#二阶滞后系统的频域响应" class="headerlink" title="二阶滞后系统的频域响应"></a>二阶滞后系统的频域响应</h2><p>在这一部分,我们来研究一下二阶滞后系统的频域响应,取阻尼系数$\zeta&#x3D;1,0.7,0.4$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zeta=[<span class="number">1</span>,<span class="number">0.7</span>,<span class="number">0.4</span>]</span><br><span class="line">omega=<span class="number">1</span></span><br><span class="line">Ls=line_generator()</span><br><span class="line">fig,ax=plt.subplots(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(T)):</span><br><span class="line">    P=tf([<span class="number">0</span>,omega**<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>*zeta[i]*omega,omega**<span class="number">2</span>])</span><br><span class="line">    gain,phase,w=bode(P,logspace(-<span class="number">2</span>,<span class="number">2</span>),Plot=<span class="literal">False</span>)</span><br><span class="line">    pltargs=&#123;<span class="string">&#x27;ls&#x27;</span>:<span class="built_in">next</span>(Ls),<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;$\zeta$=&#x27;</span>+<span class="built_in">str</span>(T[i])&#125;</span><br><span class="line">    ax[<span class="number">0</span>].semilogx(w,<span class="number">20</span>*np.log10(gain),**pltargs)</span><br><span class="line">    ax[<span class="number">1</span>].semilogx(w,phase*<span class="number">180</span>/np.pi,**pltargs)</span><br><span class="line">bodeplot_set(ax,<span class="number">3</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<pre><code>C:\Users\h\AppData\Roaming\Python\Python39\site-packages\control\freqplot.py:187: FutureWarning: &#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;
  warnings.warn(&quot;&#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;&quot;,
C:\Users\h\AppData\Roaming\Python\Python39\site-packages\control\freqplot.py:187: FutureWarning: &#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;
  warnings.warn(&quot;&#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;&quot;,
C:\Users\h\AppData\Roaming\Python\Python39\site-packages\control\freqplot.py:187: FutureWarning: &#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;
  warnings.warn(&quot;&#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;&quot;,
</code></pre>
<p><img src="/2023/01/15/control%20system/control2/output_59_1.png" alt="png"></p>
<p>通过观察伯德图,我们可以得到在高频段振幅会逐渐减小,虽然在较高频下振幅的衰减与$\zeta$无关,但是如果$\zeta$较低,会出现过冲(类似于共振)<br>相位在二姐滞后系统最终会移相180°</p>
<p>我们再来看看改变频率$\omega_n$的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zeta=<span class="number">0.5</span></span><br><span class="line">omega=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>]</span><br><span class="line">Ls=line_generator()</span><br><span class="line">fig,ax=plt.subplots(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(T)):</span><br><span class="line">    P=tf([<span class="number">0</span>,omega[i]**<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>*zeta*omega[i],omega[i]**<span class="number">2</span>])</span><br><span class="line">    gain,phase,w=bode(P,logspace(-<span class="number">2</span>,<span class="number">2</span>),Plot=<span class="literal">False</span>)</span><br><span class="line">    pltargs=&#123;<span class="string">&#x27;ls&#x27;</span>:<span class="built_in">next</span>(Ls),<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;$\omega$=&#x27;</span>+<span class="built_in">str</span>(T[i])&#125;</span><br><span class="line">    ax[<span class="number">0</span>].semilogx(w,<span class="number">20</span>*np.log10(gain),**pltargs)</span><br><span class="line">    ax[<span class="number">1</span>].semilogx(w,phase*<span class="number">180</span>/np.pi,**pltargs)</span><br><span class="line">bodeplot_set(ax,<span class="number">3</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<pre><code>C:\Users\h\AppData\Roaming\Python\Python39\site-packages\control\freqplot.py:187: FutureWarning: &#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;
  warnings.warn(&quot;&#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;&quot;,
C:\Users\h\AppData\Roaming\Python\Python39\site-packages\control\freqplot.py:187: FutureWarning: &#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;
  warnings.warn(&quot;&#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;&quot;,
C:\Users\h\AppData\Roaming\Python\Python39\site-packages\control\freqplot.py:187: FutureWarning: &#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;
  warnings.warn(&quot;&#39;Plot&#39; keyword is deprecated in bode_plot; use &#39;plot&#39;&quot;,
</code></pre>
<p><img src="/2023/01/15/control%20system/control2/output_61_1.png" alt="png"></p>
<p>可以注意到,随着$\omega_n$的增大,其相移和衰减的程度都下降了,而在固有频率处,刚好相移为90°</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P=tf([<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line">b=bode(P,logspace(-<span class="number">2</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/2023/01/15/control%20system/control2/output_63_0.png" alt="png"><br>​    </p>
]]></content>
      <categories>
        <category>Python设计控制系统</category>
      </categories>
      <tags>
        <tag>控制系统</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode特别功能总结</title>
    <url>/2023/01/17/misc/VSCode/</url>
    <content><![CDATA[<p>VSCode作为一个常用的编辑器(有时可以作为集成开发环境),其拥有许多重要的”特殊功能”,在这里进行笔记,以便未来查阅</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h2 id="正则表达式搜索替换"><a href="#正则表达式搜索替换" class="headerlink" title="正则表达式搜索替换"></a>正则表达式搜索替换</h2><h3 id="正则表达式速查表"><a href="#正则表达式速查表" class="headerlink" title="正则表达式速查表"></a>正则表达式速查表</h3><table>
<thead>
<tr>
<th>转义字符</th>
<th>匹配内容</th>
</tr>
</thead>
<tbody><tr>
<td>\t</td>
<td>tab</td>
</tr>
<tr>
<td>\r</td>
<td>回车符号\r</td>
</tr>
<tr>
<td>\n</td>
<td>换行符号\n</td>
</tr>
<tr>
<td>\</td>
<td>特殊符号转义，如”<em>“ ，转义后匹配的是字符”</em>“， “(” 匹配的是括号”(“</td>
</tr>
<tr>
<td>[字符序列]</td>
<td>匹配[ ]中的任意字符，如[ae]，字符a和字符e均匹配</td>
</tr>
<tr>
<td>[^字符序列]</td>
<td>匹配不在[ ]中的任意字符，如[^ae]除了a和e，其他字符都匹配</td>
</tr>
<tr>
<td>[字符1-字符2]</td>
<td>匹配在[ ]之间的任意字符，如[a-x]，就是匹配a和x之间的所有字符（包括a和x）</td>
</tr>
<tr>
<td><strong>.</strong></td>
<td>匹配任意单个字符(除了\n)</td>
</tr>
<tr>
<td>\w</td>
<td>匹配所有单词字符（如”a”，“3”，“E”，但不匹配”?”，”.”等）</td>
</tr>
<tr>
<td>\W</td>
<td>和\w相反，匹配所有非单词字符</td>
</tr>
<tr>
<td>\s</td>
<td>匹配空格</td>
</tr>
<tr>
<td>\S</td>
<td>和\s相反，匹配非空格</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字字符，如”1”，“4”，”9”等</td>
</tr>
<tr>
<td>\D</td>
<td>和\d相反，匹配除了数字字符外的其他字符</td>
</tr>
<tr>
<td>*</td>
<td>将前面的元素匹配0到多次，如”\d*.\d”，可以匹配”19.9”，”.0”,“129.9”</td>
</tr>
<tr>
<td>+</td>
<td>将前面的元素匹配1到多次，如”be+”，可以匹配”be”， “beeeeee”</td>
</tr>
<tr>
<td>？</td>
<td>将前面的元素匹配0次或者一次，如”rai?n” 可以且只可以匹配 “ran” 或者 “rain”</td>
</tr>
<tr>
<td>{n}</td>
<td>n是个数字，将前面的元素匹配n次，如”be{3}“可以且只可以匹配 ”beee”</td>
</tr>
<tr>
<td>{n, m}</td>
<td>将前面的元素匹配至少n次，最多m次，如”be{1,3}” 可以且只可以匹配”be”,“bee”, “beee”</td>
</tr>
<tr>
<td>|</td>
<td>相当于”或”,表示匹配由</td>
</tr>
</tbody></table>
<p>而正则表达式中的”子模式”<code>()</code>,在替换时可以使用<code>$1</code>来相应的替换.</p>
<p>例如对于<code>anaconda</code>导出的<code>environment.yml</code>文件,其一部分格式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- packagename=0.0.0=aaaaa</span><br></pre></td></tr></table></figure>

<p>由于在跨操作系统迁移时要将后面那个详细版本给去掉因此可以使用替换功能</p>
<p>查找<code>(.=.)=.</code></p>
<p>替换为<code>$1</code></p>
<h2 id="VSC分屏显示"><a href="#VSC分屏显示" class="headerlink" title="VSC分屏显示"></a>VSC分屏显示</h2><p>由于在写代码时希望可以做到两个显示屏共同显示project的代码,因此需要用分屏显示</p>
<p>首先<code>ctrl+shift+P</code>,然后输入<code>Workspace: Duplicate As Workspace in New Window</code></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>关于EasyConnect可能存在的问题以及解决方案</title>
    <url>/2023/01/16/misc/abouteasyconnect/</url>
    <content><![CDATA[<h2 id="事情起因"><a href="#事情起因" class="headerlink" title="事情起因"></a>事情起因</h2><p>今天我刷到了一个<a href="https://www.bilibili.com/video/BV163411Z7BD">视频</a>了解到<code>EasyConnect</code>似乎有滥用权限,泄露用户数据的可能,因此希望找到一种方法,在正常访问内网资源的同时实现对<code>EasyConnect</code>的控制.</p>
<h2 id="解决手段"><a href="#解决手段" class="headerlink" title="解决手段"></a>解决手段</h2><p>我采用的是视频中提供的方案,是<code>docker-easyconnect</code>,[此为源代码地址][<a href="https://github.com/Hagb/docker-easyconnect]">https://github.com/Hagb/docker-easyconnect]</a></p>
<p>在操作的时候,需要使用<code>Docker</code>环境进行隔离,刚好也对<code>Docker</code>环境进行学习</p>
<blockquote>
<p>需要注意的,在使用<code>socks5</code>代理的时候,把端口从1080改为其他类型的端口</p>
</blockquote>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>算是实现了部分的功能,在<code>Docker</code>上顺利登陆了,并且使用<code>Firefox</code>上的<code>SwichyOmega</code>实现对于流量的分流(基于<code>socks5</code>原理)(不过目前只代理了&#96;<em>.fudan.edu.cn</em>网页),这么做可以保障我在使用内网资源的时候同时可以访问外网资料</p>
<p>不过,这样的连接存在较为严重的稳定性问题,问题比较像<a href="https://github.com/Hagb/docker-easyconnect/issues/177">一个issue</a>,如何解决目前不明.</p>
<p>同时,非常遗憾的,使用这种手段无法解决我使用<code>ssh</code>的问题,而网上的资料似乎主要针对<code>Linux</code>系统,因此还是无法摆脱<code>EasyConnect</code>的困扰.</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>通讯安全</tag>
        <tag>Docker</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Python环境配置</title>
    <url>/2023/01/17/python/anaconda/</url>
    <content><![CDATA[<p>像环境配置这样的问题虽然如果想非常快弄完,也不难(你甚至可以去Mircosoft Store里面下载一个Python环境),然而,这么做*<strong>后患无穷</strong>,尤其是等到要安装一些复杂的包的时候.因此,在这篇文章中,我将介绍<code>conda</code>的使用和Python中最常见的两个环境<code>IPython</code>和<code>Jupyter Notebook</code>的相关配置,以及使用<code>VScode</code>编辑器.</p>
<h2 id="conda的使用"><a href="#conda的使用" class="headerlink" title="conda的使用"></a><code>conda</code>的使用</h2><h3 id="为什么要用conda"><a href="#为什么要用conda" class="headerlink" title="为什么要用conda"></a>为什么要用<code>conda</code></h3><blockquote>
<blockquote>
<p><em>Package, dependency and environment management for any language—Python, R, Ruby, Lua, Scala, Java, JavaScript, C&#x2F; C++, FORTRAN</em></p>
</blockquote>
</blockquote>
<p><code>conda</code>作为一个包管理器,可以保证你的电脑上同时存在多个不同的Python版本,并且每一个版本之间都相互独立,互不干扰(为何同时要有多个版本,因为许多包<strong>不是向下兼容的</strong>.简单的说,就是对于一个依赖,安装其最新的版本<strong>并不总是一个好的选择</strong>)</p>
<p>这是其优点的一方面,而另外一个方面则更为重要,在<code>conda</code>中,你可以打包,发布你的程序,这样可以非常方便的实现代码的共享(这可比直接拷贝源文件来得方便)</p>
<p>而我们这次使用的是<code>conda</code>的一个发行版(?有可能是别的名称)<code>anaconda</code>,并且以我个人电脑为例,讨论其安装与使用.</p>
<h3 id="anaconda的安装"><a href="#anaconda的安装" class="headerlink" title="anaconda的安装"></a><code>anaconda</code>的安装</h3><p>首先在<a href="https://www.anaconda.com/">官网</a>上下载<code>anaconda</code>(这个时候要养成在官网下载的习惯,不要下一堆杂七杂八的东西)</p>
<p>然后安装<code>anaconda</code>,首先它会问你是给<code>本用户安装</code>还是<code>给所有用户安装</code>,我个人建议是前者(但实际上就我所知,99%家里的Windows电脑只有一个用户)</p>
<p>之后就会有这样一个提示框</p>
<p><img src="/2023/01/17/python/anaconda/1.png" alt="image-20230117094427619"></p>
<p>这里有两个选项,我刚好要和推荐配置唱一波反调:</p>
<ol>
<li>第一个选项有关于环境变量,虽然上面并不建议添加到环境变量,但是如果不这么做,很多时候会非常麻烦</li>
<li>第二个选项是覆盖原有Python成为默认环境,我个人倾向于如果已经有Python环境了,就不要覆盖,免得影响现有依赖</li>
</ol>
<p>然后就是点击<code>Install</code>等待其安装.</p>
<h3 id="anaconda的使用"><a href="#anaconda的使用" class="headerlink" title="anaconda的使用"></a><code>anaconda</code>的使用</h3><p>安装完<code>anaconda</code>之后,你可以打开你电脑上的<code>Anaconda Powershell Prompt</code>,然后可以看见一个命令行界面</p>
<p><img src="/2023/01/17/python/anaconda/2.png" alt="image-20230117095543879"></p>
<p>不过与<code>Powershell</code>不同的是,在<code>anaconda</code>里面有一个<code>(base)</code>,这意味着你目前处于一个基础环境.</p>
<p>然后如果你在其中输入<code>IPython</code>,那么就会有<code>IPython</code>的界面跳出来,表明其已经被安装了.</p>
<p>而<code>Jupyter</code>环境则可以通过输入<code>jupyter notebook</code>尝试,你们会得到这样的界面:</p>
<p><img src="/2023/01/17/python/anaconda/3.png" alt="image-20230117100215561"></p>
<p>表明<code>Jupyter</code>内核已经启动,然后你需要使用浏览器去连接这个内核</p>
<blockquote>
<p>怎么连接希望大家自己想想,毕竟大家都懂英文</p>
</blockquote>
<p>但是实际上,我更加推荐使用<code>VSCode</code>作为<code>Jupyter</code>的编辑器,不过<code>jupyter</code>命令有别的功能,比如转换笔记本,大家可以去查找一下.</p>
<h4 id="创建新环境"><a href="#创建新环境" class="headerlink" title="创建新环境"></a>创建新环境</h4><p>好,现在假设我需要创造一个环境用来给我做机器学习,那么我们可以用</p>
<p><code>conda create -n &quot;machine-learning&quot; python=3.8</code>来创建,这里我配置了一个名字叫”machine-learning”的环境,使用的python版本为3.8</p>
<p>安装好之后,在<code>anaconda</code>里面输入<code>conda info -e</code>(展示所有的环境),就可以看到这样的结果</p>
<p><img src="/2023/01/17/python/anaconda/4.png" alt="image-20230117101138010"></p>
<p>这表明新的环境已经被成功安装,然后输一下<code>ipython</code>试一试</p>
<p><img src="/2023/01/17/python/anaconda/5.png" alt="image-20230117134918357"></p>
<p>淦,出错了,<strong>还是原来的python环境没变</strong></p>
<p>经过分析,我发现这个是我电脑原本安装的python,<strong>由于我的<code>conda</code>环境里面并没有<code>ipython</code>,因此在寻找的时候按照先后顺序就找到了自己电脑的<code>ipython</code></strong></p>
<p>因此,<em><strong>在使用<code>conda</code>的时候,务必注意环境里面你打开的究竟是哪个内核.</strong></em></p>
<h4 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h4><p>比如说,我现在要安装<code>sklearn</code>库,那么我就在网上搜索<code>sklearn anaconda</code>,然后就搜到了安装指令<code>conda install -c anaconda scikit-learn</code><a href="https://anaconda.org/anaconda/scikit-learn">网址</a></p>
<p>把这输进去(注意检查当前的环境),然后安装即可</p>
<p>其会自动安装依赖,比如:</p>
<p><img src="/2023/01/17/python/anaconda/9.png" alt="image-20230117141643636"></p>
<h4 id="转移环境"><a href="#转移环境" class="headerlink" title="转移环境"></a>转移环境</h4><p>假如你千辛万苦配好一个环境并且成功运行了一套程序,然后你需要移到别的电脑上运行(这台电脑可能是别的系统)</p>
<p>你可以采用<code>conda env export &gt; environment.yml</code>来创建一个配置文件,然后把这个文件复制到另外一台电脑(可能是集群),然后<code>conda env create -f environment.yml</code>,就可以在不同的操作系统平台上复现环境</p>
<blockquote>
<p>这种情况并不少见,你可能希望在自己电脑上(Windows或Mac)编程,然后到集群上(Linux)运行</p>
</blockquote>
<p>可以参考一下<a href="https://www.jianshu.com/p/dea48074b5b8">这个网页</a></p>
<blockquote>
<p>需要注意删除一些不必要的库以提升可移植性</p>
</blockquote>
<h4 id="源配置"><a href="#源配置" class="headerlink" title="源配置"></a>源配置</h4><p>由于一些众所周知的原因,大家需要使用国内镜像站,可以给一个网址</p>
<h2 id="VSCode的安装与使用"><a href="#VSCode的安装与使用" class="headerlink" title="VSCode的安装与使用"></a><code>VSCode</code>的安装与使用</h2><p><code>VSCode</code>作为一个常用编辑器,其安装并不复杂,这个大家自己网上搜就可以了.</p>
<h3 id="VSCode的常用插件"><a href="#VSCode的常用插件" class="headerlink" title="VSCode的常用插件"></a>VSCode的常用插件</h3><ol>
<li>Better Comments</li>
<li>Jupyter(注意,在使用前,需要安装好<code>Jupyter</code>内核)</li>
<li>Python(为python程序设计提供IDE环境)</li>
</ol>
<h2 id="最后想要提醒的"><a href="#最后想要提醒的" class="headerlink" title="最后想要提醒的"></a>最后想要提醒的</h2><p>在每次打开程序的时候,务必要注意打开的python版本</p>
<p>比如:</p>
<p><img src="/2023/01/17/python/anaconda/6.png" alt="image-20230117140557615"></p>
<p><img src="/2023/01/17/python/anaconda/7.png" alt="image-20230117140625609"></p>
<p><img src="/2023/01/17/python/anaconda/8.png" alt="image-20230117141531520"></p>
]]></content>
      <categories>
        <category>python培训</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>所思即所得,一些画图软件(包)介绍</title>
    <url>/2023/01/26/misc/graphviz/</url>
    <content><![CDATA[<p>由于我在学习控制系统的时候,感觉<code>Visio</code>绘图手感像坨屎(我承认是我手不行),但是像流程图这样的东西有特点,即如果你能在这些空间里面把你想要塞的东西全部塞进去,那么优化这样的工作可以是完全交由计算机自行处理的.</p>
<p>在这里,我主要将介绍两种方式进行该类绘图,一种是使用<code>LaTex</code>中<code>tikz</code>包进行绘图,还有一种是使用<code>Graphviz</code>进行绘图</p>
<span id="more"></span>

<h2 id="tikz包的使用与导出"><a href="#tikz包的使用与导出" class="headerlink" title="tikz包的使用与导出"></a><code>tikz</code>包的使用与导出</h2><p><code>tikz</code>包是在<code>LaTex</code>中的一个包,其可以方便(有模板的条件下)实现图的绘制</p>
<p>不过<code>LaTex</code>主要导出的是<code>pdf</code>文件,因此需要进行转换</p>
<h3 id="tikz包的使用-以一个例子为例"><a href="#tikz包的使用-以一个例子为例" class="headerlink" title="tikz包的使用(以一个例子为例)"></a><code>tikz</code>包的使用(以一个例子为例)</h3><p>我们首先以一个官方例子来介绍<code>tikz</code>包</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;  </span><br><span class="line"><span class="keyword">\usepackage</span>&#123;tikz&#125;</span><br><span class="line"><span class="keyword">\usetikzlibrary</span>&#123;shapes,arrows&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">\tikzstyle</span>&#123;block&#125; = [draw, fill=blue!20, rectangle, </span><br><span class="line">    minimum height=3em, minimum width=6em]</span><br><span class="line"><span class="keyword">\tikzstyle</span>&#123;sum&#125; = [draw, fill=blue!20, circle, node distance=1cm]</span><br><span class="line"><span class="keyword">\tikzstyle</span>&#123;input&#125; = [coordinate]</span><br><span class="line"><span class="keyword">\tikzstyle</span>&#123;output&#125; = [coordinate]</span><br><span class="line"><span class="keyword">\tikzstyle</span>&#123;pinstyle&#125; = [pin edge=&#123;to-,thin,black&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">% The block diagram code is probably more verbose than necessary</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;tikzpicture&#125;[auto, node distance=2cm,&gt;=latex&#x27;]</span><br><span class="line">    <span class="comment">% We start by placing the blocks</span></span><br><span class="line">    <span class="keyword">\node</span> [input, name=input] &#123;&#125;;</span><br><span class="line">    <span class="keyword">\node</span> [sum, right of=input] (sum) &#123;&#125;;</span><br><span class="line">    <span class="keyword">\node</span> [block, right of=sum] (controller) &#123;Controller&#125;;</span><br><span class="line">    <span class="keyword">\node</span> [block, right of=controller, pin=&#123;[pinstyle]above:Disturbances&#125;,</span><br><span class="line">            node distance=3cm] (system) &#123;System&#125;;</span><br><span class="line">    <span class="comment">% We draw an edge between the controller and system block to </span></span><br><span class="line">    <span class="comment">% calculate the coordinate u. We need it to place the measurement block. </span></span><br><span class="line">    <span class="keyword">\draw</span> [-&gt;] (controller) -- node[name=u] &#123;<span class="built_in">$</span>u<span class="built_in">$</span>&#125; (system);</span><br><span class="line">    <span class="keyword">\node</span> [output, right of=system] (output) &#123;&#125;;</span><br><span class="line">    <span class="keyword">\node</span> [block, below of=u] (measurements) &#123;Measurements&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">% Once the nodes are placed, connecting them is easy. </span></span><br><span class="line">    <span class="keyword">\draw</span> [-&gt;] (input) -- node &#123;<span class="built_in">$</span>r<span class="built_in">$</span>&#125; (sum);</span><br><span class="line">    <span class="keyword">\draw</span> [-&gt;] (sum) -- node &#123;<span class="built_in">$</span>e<span class="built_in">$</span>&#125; (controller);</span><br><span class="line">    <span class="keyword">\draw</span> [-&gt;] (system) -- node [name=y] &#123;<span class="built_in">$</span>y<span class="built_in">$</span>&#125;(output);</span><br><span class="line">    <span class="keyword">\draw</span> [-&gt;] (y) |- (measurements);</span><br><span class="line">    <span class="keyword">\draw</span> [-&gt;] (measurements) -| node[pos=0.99] &#123;<span class="built_in">$</span>-<span class="built_in">$</span>&#125; </span><br><span class="line">        node [near end] &#123;<span class="built_in">$</span>y<span class="built_in">_</span>m<span class="built_in">$</span>&#125; (sum);</span><br><span class="line"><span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码会带来以下的渲染结果:</p>
<p><img src="/2023/01/26/misc/graphviz/test-1.png" alt="test-1"></p>
<p>我们来分段介绍内容</p>
<h4 id="节点node"><a href="#节点node" class="headerlink" title="节点node"></a>节点<code>node</code></h4><p>节点可以看作骨架,应当是最为基础的部分</p>
<p><code>node</code>有三种定义方式:</p>
<ol>
<li>使用<code>\node</code>定义,这里的定义方式应当为<code>\node [style and place] (name) &#123;label&#125;</code></li>
<li>在<code>draw</code>中定义,这种定义往往是用于在线上写字<code>-- node [name and position] &#123;label&#125;</code></li>
<li>使用<code>pin</code>定义</li>
</ol>
<p>然后关于位置,<code>pos</code>应该是线的位置,越大越靠近终点</p>
<h4 id="箭头draw"><a href="#箭头draw" class="headerlink" title="箭头draw"></a>箭头<code>draw</code></h4><p><code>\draw [-&gt;] (nodefrom) -- (nodeto)</code></p>
<p>直接在两个中间添加一个箭头(中间可以添加新节点)</p>
<p><code>\draw [-&gt;] (nodefrom) -| (nodeto)</code></p>
<p>这个箭头是折线</p>
<h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><p>这里我们就直接套用好了没有必要去修改</p>
<h4 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h4><p>下面我以控制系统中的一幅框图来实践刚才的知识(只保留)主干部分代码</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;tikzpicture&#125;[auto, node distance=2cm,&gt;=latex&#x27;]</span><br><span class="line">    <span class="keyword">\node</span> [input] (input) &#123;&#125;;</span><br><span class="line">    <span class="keyword">\node</span> [sum, right of=input] (sum1) &#123;&#125;;</span><br><span class="line">    <span class="keyword">\node</span> [block, right of=sum1] (controlp) &#123;<span class="built_in">$</span>k<span class="built_in">_</span>P<span class="built_in">$</span>&#125;;</span><br><span class="line">    <span class="keyword">\node</span> [sum, right of=controlp,node distance=2cm] (sum2) &#123;&#125;;</span><br><span class="line">    <span class="keyword">\node</span> [input, above of=sum2] (dis) &#123;&#125;;</span><br><span class="line">    <span class="keyword">\node</span> [block ,right of=sum2] (p) &#123;<span class="built_in">$</span><span class="keyword">\mathcal</span>&#123;P&#125;<span class="built_in">$</span>&#125;;</span><br><span class="line">    <span class="keyword">\node</span> [output, right of=p] (output) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">\node</span> [output, below of=sum2] (ins) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">\draw</span> [-&gt;] (input) -- node &#123;<span class="built_in">$</span>r<span class="built_in">$</span>&#125; (sum1);</span><br><span class="line">    <span class="keyword">\draw</span> [-&gt;] (sum1) -- node &#123;<span class="built_in">$</span>e<span class="built_in">$</span>&#125; (controlp);</span><br><span class="line">    <span class="keyword">\draw</span> [-&gt;] (controlp) -- node &#123;<span class="built_in">$</span>u<span class="built_in">$</span>&#125; node[pos=0.99] &#123;+&#125; (sum2);</span><br><span class="line">    <span class="keyword">\draw</span> [-&gt;] (dis) -- node &#123;<span class="built_in">$</span>d<span class="built_in">$</span>&#125; node[pos=0.99] &#123;+&#125; (sum2);</span><br><span class="line">    <span class="keyword">\draw</span> [-&gt;] (sum2) -- (p);</span><br><span class="line">    <span class="keyword">\draw</span> [-&gt;] (p) -- node[name=y] &#123;<span class="built_in">$</span>y<span class="built_in">$</span>&#125; (output);</span><br><span class="line">    <span class="keyword">\draw</span> [-] (y) |-   (ins);<span class="comment">%中间切断了一下</span></span><br><span class="line">    <span class="keyword">\draw</span> [-&gt;] (ins) -| node[pos=0.99] &#123;-&#125; (sum1);</span><br><span class="line"><span class="keyword">\end</span>&#123;tikzpicture&#125;</span><br></pre></td></tr></table></figure>



<p>其渲染结果如下所示:</p>
<p><img src="/2023/01/26/misc/graphviz/image-20230127220705981.png" alt="image-20230127220705981"></p>
<p>可以看到渲染效果不错</p>
<blockquote>
<p>但是敲<code>tikz</code><strong>太累人</strong>了</p>
</blockquote>
<p>这里主要是介绍性使用<code>tikz</code>,更加完备的教程应当参考这个<a href="https://github.com/Hansimov/pgfmanual-zh">仓库</a></p>
<h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>目前来说,我觉得还是<strong>截图保存</strong>的方式最便捷</p>
<p>虽然确实可以用<code>LaTex</code>直接导出,也可以用python对<code>pdf</code>进行转换,但是太麻烦,还是截图方便</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>LaTex</tag>
        <tag>绘图</tag>
      </tags>
  </entry>
  <entry>
    <title>使用loguru编写日志文件</title>
    <url>/2023/01/27/misc/pylog/</url>
    <content><![CDATA[<p>在编写程序,尤其是某些运行时间长,中间存在可能错误的程序,往往需要记录日志以便于调试.  </p>
<p>但是日志的编写往往存在大量重复劳动,并且对于我目前的状况来讲可能需要在已有的程序中添加日志代码.  </p>
<p>经过相关资料查阅,我找到了一个内置<code>logging</code>库,其可以较好地实现对于日志的编写.但是查阅了一下相关资料后,发现似乎<code>logging</code>的使用较为复杂,我们往往不需要那么复杂的应用场景,因此我在这里选择另外一个库<code>loguru</code>对日志进行记录</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>如果使用<code>anaconda</code>,可以用以下命令安装:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install -c conda-forge loguru</span><br></pre></td></tr></table></figure>

<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>我们可以直接利用封装好的<code>logger</code>对象,直接对不同级别的日志进行输出,例如使用以下代码可以实现不同级别的日志:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">&#x27;This is debug information&#x27;</span>)</span><br><span class="line">logger.info(<span class="string">&#x27;This is info information&#x27;</span>)</span><br><span class="line">logger.warning(<span class="string">&#x27;This is warn information&#x27;</span>)</span><br><span class="line">logger.error(<span class="string">&#x27;This is error information&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>可以注意到在运行时,其对于不同级别的结果,有着不同的格式化与颜色</p>
<p><img src="/2023/01/27/misc/pylog/image-20230127192915053.png" alt="image-20230127192915053"></p>
<p>接下来,我们可以注意到<code>logger</code>编写日志的一个优势在于其无需设定复杂的如处理器,过滤器等信息</p>
<h2 id="输出到文件"><a href="#输出到文件" class="headerlink" title="输出到文件"></a>输出到文件</h2><p>我们往往需要将数据输出到文件,<em>尤其是在使用如<code>xspec</code>这样自己会有大量数据输出的程序</em>(默认是在<code>sys.std_err</code>中输出),可以使用<code>add</code>改变输出位置(<code>add</code>的具体用法之后会讲)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">&quot;file_&#123;time&#125;.log&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>其中<code>&#123;time&#125;</code>会自动替换为当前时间,还有其他的格式化字典如下:  </p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Description</th>
<th>Attributes</th>
</tr>
</thead>
<tbody><tr>
<td>elapsed</td>
<td>The time elapsed since the start of the program</td>
<td>See <a href="https://docs.python.org/3/library/datetime.html#datetime.timedelta"><code>datetime.timedelta</code></a></td>
</tr>
<tr>
<td>exception</td>
<td>The formatted exception if any, <code>None</code> otherwise</td>
<td><code>type</code>, <code>value</code>, <code>traceback</code></td>
</tr>
<tr>
<td>extra</td>
<td>The dict of attributes bound by the user (see <a href="https://loguru.readthedocs.io/en/stable/api/logger.html#loguru._logger.Logger.bind"><code>bind()</code></a>)</td>
<td>None</td>
</tr>
<tr>
<td>file</td>
<td>The file where the logging call was made</td>
<td><code>name</code> (default), <code>path</code></td>
</tr>
<tr>
<td>function</td>
<td>The function from which the logging call was made</td>
<td>None</td>
</tr>
<tr>
<td>level</td>
<td>The severity used to log the message</td>
<td><code>name</code> (default), <code>no</code>, <code>icon</code></td>
</tr>
<tr>
<td>line</td>
<td>The line number in the source code</td>
<td>None</td>
</tr>
<tr>
<td>message</td>
<td>The logged message (not yet formatted)</td>
<td>None</td>
</tr>
<tr>
<td>module</td>
<td>The module where the logging call was made</td>
<td>None</td>
</tr>
<tr>
<td>name</td>
<td>The <code>__name__</code> where the logging call was made</td>
<td>None</td>
</tr>
<tr>
<td>process</td>
<td>The process in which the logging call was made</td>
<td><code>name</code>, <code>id</code> (default)</td>
</tr>
<tr>
<td>thread</td>
<td>The thread in which the logging call was made</td>
<td><code>name</code>, <code>id</code> (default)</td>
</tr>
<tr>
<td>time</td>
<td>The aware local time when the logging call was made</td>
<td></td>
</tr>
</tbody></table>
<p>输出到文件还有滚动和压缩等功能,在这里不再过多赘述(目前也用不到)</p>
<blockquote>
<p>关于字符着色:</p>
<p>字符着色的问题是通过调节<code>add</code>中的参数<code>colorize</code>来控制的,其添加后有好处有坏处</p>
<p>好处在于可以使用<code>tail -f</code>等很方便看到数据内容</p>
<p>坏处在于由于字符串着色的机理是通过添加字符串进行的,会对编辑器查看带来不便</p>
<p>因此可以尝试同时记录两个log</p>
</blockquote>
<h2 id="过滤器与格式化"><a href="#过滤器与格式化" class="headerlink" title="过滤器与格式化"></a>过滤器与格式化</h2><p>下面是关于更加复杂的过滤器写法和格式化写法的问题,这里不涉及(可能以后会),可以先看参考资料</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/Delgan/loguru">源代码与特性介绍</a></p>
<p><a href="https://loguru.readthedocs.io/en/stable/api/logger.html">类定义</a></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用python发送邮件</title>
    <url>/2023/01/30/misc/pythonsmtp/</url>
    <content><![CDATA[<p>由于之前写了一个误差计算脚本,采用了万能的<code>nohup python calc_error.py &gt;logs &amp;</code>实现了后台运行,但是在实际使用过程中,经常会遇到异常或者一些奇奇怪怪的问题,自己每次上线检查也麻烦,遂思考能不能用邮件来解决问题.  </p>
<p>我参考<a href="https://zhuanlan.zhihu.com/p/24180606">这篇文章</a>,学习一下使用python发送邮件</p>
<h2 id="所用到的库"><a href="#所用到的库" class="headerlink" title="所用到的库"></a>所用到的库</h2><p>我们分为两部,一方面是写邮件的过程,需要特定的邮件头和附件,这一部分使用的是<code>email</code>模块进行</p>
<blockquote>
<p>我在使用<code>pip install email</code>的时候一直出错,但是到<code>pip install emails</code>就可以,目前不确定两者关系,但是都可以使用<code>import email</code>调用</p>
</blockquote>
<p>而编写完邮件后,对于邮件的发送则是通过<code>smtp</code>服务进行,这一部分则是用<code>smtplib</code>实现,而其安装可以用<code>pip install aiosmtplib</code>进行</p>
<h2 id="配置smtp"><a href="#配置smtp" class="headerlink" title="配置smtp"></a>配置<code>smtp</code></h2><p>我计划使用<code>Gmail</code>对这些邮件进行配置,为此,我打开了<code>Gmail</code>中的<code>imap</code>和<code>pop3</code>服务,关于<code>Gmail</code>更多信息如下,<a href="https://support.google.com/mail/answer/7126229">摘自于此</a></p>
<table>
<thead>
<tr>
<th>内容</th>
<th>配置</th>
</tr>
</thead>
<tbody><tr>
<td>接收邮件 (IMAP) 服务器</td>
<td>imap.gmail.com       要求 SSL：是       端口：993</td>
</tr>
<tr>
<td>发送邮件 (SMTP) 服务器</td>
<td>smtp.gmail.com       要求 SSL：是       要求 TLS：是（如适用）       使用身份验证：是       SSL 端口：465       TLS&#x2F;STARTTLS 端口：587</td>
</tr>
<tr>
<td>完整名称或显示名称</td>
<td>您的姓名</td>
</tr>
<tr>
<td>帐号名、用户名或电子邮件地址</td>
<td>您的完整电子邮件地址</td>
</tr>
<tr>
<td>密码</td>
<td>您的 Gmail 密码</td>
</tr>
</tbody></table>
<h2 id="尝试发送邮件"><a href="#尝试发送邮件" class="headerlink" title="尝试发送邮件"></a>尝试发送邮件</h2><p>下面代码展示发送测试邮件过程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line">mail_host=<span class="string">&#x27;&#x27;</span></span><br><span class="line">mail_user=<span class="string">&#x27;&#x27;</span></span><br><span class="line">mail_pass=<span class="string">&#x27;&#x27;</span></span><br><span class="line">sender=<span class="string">&#x27;&#x27;</span></span><br><span class="line">receivers=[<span class="string">&#x27;&#x27;</span>]<span class="comment">#可以群发</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置邮件信息</span></span><br><span class="line">message=MIMEText(<span class="string">&#x27;content&#x27;</span>,<span class="string">&#x27;plain&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">message[<span class="string">&#x27;Subject&#x27;</span>]=<span class="string">&quot;Test email&quot;</span></span><br><span class="line">message[<span class="string">&#x27;From&#x27;</span>]=sender</span><br><span class="line">message[<span class="string">&#x27;To&#x27;</span>]=receivers[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># smtpobj=smtplib.SMTP()</span></span><br><span class="line">    <span class="comment"># smtpobj.connect(mail_host,25)#这是无需ssl验证的情况</span></span><br><span class="line">    smtpobj=smtplib.SMTP_SSL(mail_host)<span class="comment">#这是需要ssl验证的情况</span></span><br><span class="line">    smtpobj.login(mail_user,mail_pass)</span><br><span class="line">    smtpobj.sendmail(sender,receivers,message.as_string())</span><br><span class="line">    smtpobj.quit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Success&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>,e)</span><br></pre></td></tr></table></figure>

<p>这个代码确实可以发送邮件,测试完成</p>
<h2 id="添加附件"><a href="#添加附件" class="headerlink" title="添加附件"></a>添加附件</h2><p>我们可以利用<code>MIMENonMultipart</code>中的<code>MIMEText</code>类来发送我们得到的csv文件</p>
<p>可以参考<a href="https://www.cnblogs.com/sunjump/p/15593585.html">这篇文章</a></p>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>自然,我们可以实现更多内容(比如HTML等),但是我目前不需要,就先留在这里,可能未来还会更新</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>路径规划器设计总结</title>
    <url>/2023/01/31/3Dmover/routeplanner/</url>
    <content><![CDATA[<p>经过数日的鏖战,我算是把一个路径规划程序给写完了,然而,这其中隐藏着不少的问题,以至于虽然这个程序<em>理论上</em>能够给出正确答案,但是实际上由于某些原因完全无法使用,下面我将这个记录下来,以供参考</p>
<span id="more"></span>
<h2 id="程序目的"><a href="#程序目的" class="headerlink" title="程序目的"></a>程序目的</h2><p>因为我们研究的磁场中存在物体,因此不能简单的整个空间到处跑,而是要根据物体的位置,进行<strong>避障</strong>,避完障之后还要<strong>选择一个尽量好的路径</strong></p>
<p>虽然说后者是一个典型的<strong>旅行商问题</strong>,显然是不可能在多项式时间以内完成的,但是我们这里不是算法题,并且实际计算的点并不多,因此并不是最为复杂的</p>
<p>但是前面一个问题就要复杂的多,因为我没有学过计算机图形学,只能自己猜应该怎么做,之后可以查一些别的资料(好像在这一部分可以用<strong>蚁群算法</strong>实现)</p>
<p>下面我就来介绍一下我的这个程序是如何工作的</p>
<h2 id="程序整体框架"><a href="#程序整体框架" class="headerlink" title="程序整体框架"></a>程序整体框架</h2><p>下图展示了这个程序的整体框架</p>
<p><img src="struct.png" alt="struct"></p>
<h2 id="算法内容"><a href="#算法内容" class="headerlink" title="算法内容"></a>算法内容</h2><p>这些算法可以参考以下内容</p>
<ol>
<li><a href="https://lsyxiaopang.github.io/2023/01/16/3Dmover/3Dmoveslice/">输入模型与判断点线与模型关系</a></li>
<li><a href="https://lsyxiaopang.github.io/2023/01/16/3Dmover/3Dmove2/">利用最小生成树方法挑选路径</a></li>
</ol>
<p>我们主要要讲的是中间<em>寻找任意两点间路径</em>这一部分实现</p>
<h3 id="寻找任意两点间路径"><a href="#寻找任意两点间路径" class="headerlink" title="寻找任意两点间路径"></a>寻找任意两点间路径</h3><p>寻找任意两点间的路径算法如下</p>
<p><img src="findroute.png" alt="findroute"></p>
<p>这中间有一个找顶点<strong>做偏移</strong>的步骤,理论上来说是可以贴边不偏移的,但是实际上你那么做的时候由于凹多边形,两个顶点都在边上时你<strong>难以判断这条线是不是在模型里面</strong></p>
<blockquote>
<p>也许我们可以在线上随机取点判断是否在模型中,但这未免太麻烦</p>
</blockquote>
<p>于是我就用一个小的偏移,在顶点处两线交汇处的角平分线移动一小段距离作为新的顶点</p>
<blockquote>
<p>这种方法偏移太大自然不行,但是偏移太小也会导致点判断错误,这与判断点是否在障碍物内算法有关</p>
</blockquote>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>我拿了一个非常简单的模型进行了尝试,结果它硬生生跑了好久,最后扔给我这样一个结果</p>
<p><img src="Figure_1.png" alt="Figure_1"></p>
<p>红色的是障碍物轮廓,蓝色的是规划的路径</p>
<p>确实其给了我一个<em>可行答案</em>,但是这个答案<em>并不好</em>,而且获得答案的代价<strong>不可接受</strong></p>
<p>我认为主要原因来自于避障规划使用贪心算法,会给出并不一定好的结果,但是并不能用上贪心算法的高效</p>
<p>无疑这个问题还需要查阅更多的资料</p>
]]></content>
      <categories>
        <category>3D位移平台</category>
      </categories>
      <tags>
        <tag>3D位移平台</tag>
        <tag>计算机图形学</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>关注闭环系统的控制系统设计(上)</title>
    <url>/2023/01/31/control%20system/close-sys1/</url>
    <content><![CDATA[<p>对于一个被控制对象$\mathcal{P}$,我们需要搭建一个反馈控制系统,如图所示:<br><img src="/2023/01/31/control%20system/close-sys1/image-20230131204212577.png" alt="image-20230131204212577"><br>其中$\mathcal{K}$为控制器,$r$为目标值,$u$为控制输入,$d$为扰动,$y$为输出,$e$为误差,下面来分别介绍稳定性,时域特性以及频域响应特性</p>
<span id="more"></span>

<h2 id="设计规格"><a href="#设计规格" class="headerlink" title="设计规格"></a>设计规格</h2><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>对于闭环系统,外部输入有$r$和$d$,输出包含了被控对象的输出$y$和控制器的输出$u$,因此闭环系统要同时考虑从$r,d$到$u,y$总共四个稳定性<br>通过相关的数学计算,若其特征多项式$\phi(s)&#x3D;D_P(s)D_K(s)+N_P(s)N_K(s)$(其中$\mathcal{P}(s)&#x3D;\frac{N_P(s)}{D_P(s)}$)的根是稳定的,系统内部就是稳定的  </p>
<blockquote>
<p>这一个过程利用传递函数法不难推导  </p>
</blockquote>
<h3 id="时域响应特性"><a href="#时域响应特性" class="headerlink" title="时域响应特性"></a>时域响应特性</h3><p>从发生阶跃到逐渐稳定的过程由许多部分组成,在响应中振荡的部分被称作<strong>瞬态特性</strong>,而当经过足够长时间后振荡收敛的部分则被称为<strong>稳态特性</strong></p>
<p>而对瞬态特性进行定量评价的指标有:<strong>上升时间(从10%-90%),调整时间(稳定在$\pm$%5),峰值时间,过冲</strong>,对于稳态响应进行定量评价的则为<strong>稳态误差</strong>,其描述目标值和稳定值之间的差  </p>
<h3 id="频域响应特性"><a href="#频域响应特性" class="headerlink" title="频域响应特性"></a>频域响应特性</h3><p>描述瞬态特性的指标有<strong>通频带$\omega_{bw}$(幅值下降约3dB的频率)和峰值增益$M_p$</strong>,往往在峰值增益处叫作协助峰值</p>
<h3 id="闭环系统的设计规格"><a href="#闭环系统的设计规格" class="headerlink" title="闭环系统的设计规格"></a>闭环系统的设计规格</h3><p>根据我们之前所讨论的,在控制系统的设计中闭环系统应当满足以下条件:</p>
<ol>
<li>稳定性</li>
<li>快速性(通频带较大)</li>
<li>阻尼特性(峰值增益较小)</li>
<li>稳态特性(直流增益为1)</li>
</ol>
<h2 id="PID控制"><a href="#PID控制" class="headerlink" title="PID控制"></a>PID控制</h2><p>PID分为三个部分构成:</p>
<ol>
<li>P:比例(Partial),现在的信息,实时误差</li>
<li>I:积分(Integral),过去的信息</li>
<li>D:微分(Derivative),未来的信息<br>只用P,可以让系统稳定,但是无法移动到目标位置,使用PI,可以让系统达到目标,但是会振荡</li>
</ol>
<p>使用公式来表述PID控制,可以写为:<br>$$u(t)&#x3D;k_pe(t)+k_1\int^t_0 e(t_s)\mathbf{d}t_s+k_D\dot{e}(t)$$<br>而对其进行拉普拉斯变换则得到:<br>$$u(s)&#x3D;\frac{k_Ds^2+k_Ps+k_1}{s}e(s)$$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#准备工作</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> control <span class="keyword">as</span> ct </span><br><span class="line"><span class="keyword">from</span> control.matlab <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">line_generator</span>():</span><br><span class="line">    linestyle=[<span class="string">&quot;-&quot;</span>,<span class="string">&quot;--&quot;</span>,<span class="string">&quot;-.&quot;</span>,<span class="string">&quot;:&quot;</span>]</span><br><span class="line">    lineid=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> linestyle[lineid] <span class="comment">#* 这个yield用法很有趣,可以学习一下</span></span><br><span class="line">        lineid=(lineid+<span class="number">1</span>)%<span class="built_in">len</span>(linestyle)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_set</span>(<span class="params">fig_ax,*args</span>):</span><br><span class="line">    fig_ax.set_xlabel(args[<span class="number">0</span>])</span><br><span class="line">    fig_ax.set_ylabel(args[<span class="number">1</span>])</span><br><span class="line">    fig_ax.grid(ls=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args)==<span class="number">3</span>:</span><br><span class="line">        fig_ax.legend(loc=args[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bodeplot_set</span>(<span class="params">fig_ax,*args</span>):</span><br><span class="line">    fig_ax[<span class="number">0</span>].grid(which=<span class="string">&#x27;both&#x27;</span>,ls=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    fig_ax[<span class="number">0</span>].set_ylabel(<span class="string">&#x27;Gain [dB]&#x27;</span>)</span><br><span class="line">    fig_ax[<span class="number">1</span>].grid(which=<span class="string">&#x27;both&#x27;</span>,ls=<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    fig_ax[<span class="number">1</span>].set_xlabel(<span class="string">&#x27;$\omega$ [rad/s]&#x27;</span>)</span><br><span class="line">    fig_ax[<span class="number">1</span>].set_ylabel(<span class="string">&#x27;Phase [deg]&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args)&gt;<span class="number">0</span>:</span><br><span class="line">        fig_ax[<span class="number">1</span>].legend(loc=args[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args)&gt;<span class="number">1</span>:</span><br><span class="line">        fig_ax[<span class="number">0</span>].legend(loc=args[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<h3 id="P控制性能"><a href="#P控制性能" class="headerlink" title="P控制性能"></a>P控制性能</h3><p>如下图所示的P控制系统是通过误差来按照比例计算控制输入的<br><img src="/image-20230131204256286.png" alt="image-20230131204256286"></p>
<p>下面以机械臂(二姐滞后系统)为例,看看P控制效果</p>
<p>下面这段代码描述了模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g,l,M,mu,J=<span class="number">9.81</span>,<span class="number">0.2</span>,<span class="number">0.5</span>,<span class="number">1.5e-2</span>,<span class="number">1e-2</span></span><br><span class="line">P=tf([<span class="number">0</span>,<span class="number">1</span>],[J,mu,M*g*l])</span><br><span class="line">ref=<span class="number">30</span><span class="comment">#目标位置</span></span><br></pre></td></tr></table></figure>

<p>我们来试试不同的比例增益阶跃响应会是如何</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kp=(<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">ls=line_generator()</span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    K=tf([<span class="number">0</span>,kp[i]],[<span class="number">0</span>,<span class="number">1</span>])<span class="comment">#P控制</span></span><br><span class="line">    gyr=feedback(P*K,<span class="number">1</span>)<span class="comment">#形成反馈系统</span></span><br><span class="line">    y,t=step(gyr,np.arange(<span class="number">0</span>,<span class="number">2</span>,<span class="number">0.01</span>))<span class="comment">#这里与参考之间是归一化</span></span><br><span class="line">    pltargs=&#123;<span class="string">&#x27;ls&#x27;</span>:<span class="built_in">next</span>(ls),<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;$k_P$=&#x27;</span>+<span class="built_in">str</span>(kp[i])&#125;</span><br><span class="line">    ax.plot(t,y*ref,**pltargs)</span><br><span class="line">ax.axhline(ref,color=<span class="string">&#x27;k&#x27;</span>,linewidth=<span class="number">0.5</span>)</span><br><span class="line">plot_set(ax,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;best&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p><img src="/2023/01/31/control%20system/close-sys1/close_sys_8_0.png" alt="png"><br>​    </p>
<p>可以注意到,只使用P控制无法实现达到目标位置,但是$k$越大,离目标位置越近  </p>
<blockquote>
<p>这里有一个理解上的问题,这里的输入实际上是<strong>预期值</strong>,结果P控制后才转化为像力矩一样的东西  </p>
</blockquote>
<p>我们接下来看看这个系统的伯德图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls=line_generator()</span><br><span class="line">fig,ax=plt.subplots(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((<span class="built_in">len</span>(kp))):</span><br><span class="line">    k=tf([<span class="number">0</span>,kp[i]],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">    gyr=feedback(P*k,<span class="number">1</span>)</span><br><span class="line">    gain,phase,w=bode(gyr,logspace(-<span class="number">1</span>,<span class="number">2</span>),plot=<span class="literal">False</span>)</span><br><span class="line">    pltargs=&#123;<span class="string">&#x27;ls&#x27;</span>:<span class="built_in">next</span>(ls),<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;$k_P$=&#x27;</span>+<span class="built_in">str</span>(kp[i])&#125;</span><br><span class="line">    ax[<span class="number">0</span>].semilogx(w,<span class="number">20</span>*np.log10(gain),**pltargs)</span><br><span class="line">    ax[<span class="number">1</span>].semilogx(w,phase*<span class="number">180</span>/np.pi,**pltargs)</span><br><span class="line">bodeplot_set(ax,<span class="string">&#x27;best&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p><img src="/2023/01/31/control%20system/close-sys1/close_sys_10_0.png" alt="png"><br>​    </p>
<p>可以注意到,随着$k_P$的增加,通频带在增加,但系统也会更加振荡</p>
<h3 id="PD控制"><a href="#PD控制" class="headerlink" title="PD控制"></a>PD控制</h3><p>刚才我们看到了,随着$k_P$的逐渐增大,振荡也会变大,可以通过添加D控制来控制振荡.<br>PD控制如下图所示,为$\mathcal{K}(s)&#x3D;k_Ds+k_P$<br><img src="/image-20230131204321765.png" alt="image-20230131204321765"></p>
<p>我们可以用以下代码对PD控制进行模拟</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kp=<span class="number">2</span></span><br><span class="line">kd=(<span class="number">0</span>,<span class="number">0.1</span>,<span class="number">0.2</span>)</span><br><span class="line">ls=line_generator()</span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    k=tf([kd[i],kp],[<span class="number">0</span>,<span class="number">1</span>])<span class="comment">#PD控制</span></span><br><span class="line">    gyr=feedback(P*k,<span class="number">1</span>)</span><br><span class="line">    y,t=step(gyr,np.arange(<span class="number">0</span>,<span class="number">2</span>,<span class="number">0.01</span>))</span><br><span class="line">    pltargs=&#123;<span class="string">&#x27;ls&#x27;</span>:<span class="built_in">next</span>(ls),<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;$k_D$=&#x27;</span>+<span class="built_in">str</span>(kd[i])&#125;</span><br><span class="line">    ax.plot(t,y*ref,**pltargs)</span><br><span class="line">ax.axhline(ref,color=<span class="string">&#x27;k&#x27;</span>,linewidth=<span class="number">0.5</span>)</span><br><span class="line">plot_set(ax,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;best&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p><img src="/2023/01/31/control%20system/close-sys1/close_sys_13_0.png" alt="png"><br>​    </p>
<p>我们可以注意到,在有D控制的情况下,振荡得到了有效的抑制,<strong>但是稳态误差不为0</strong><br>我们接下来来研究一下闭环系统的伯德图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls=line_generator()</span><br><span class="line">fig,ax=plt.subplots(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    k=tf([kd[i],kp],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">    gyr=feedback(P*k,<span class="number">1</span>)</span><br><span class="line">    gain,phase,w=bode(gyr,logspace(-<span class="number">1</span>,<span class="number">2</span>),plot=<span class="literal">False</span>)</span><br><span class="line">    pltargs=&#123;<span class="string">&#x27;ls&#x27;</span>:<span class="built_in">next</span>(ls),<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;$k_D$=&#x27;</span>+<span class="built_in">str</span>(kd[i])&#125;</span><br><span class="line">    ax[<span class="number">0</span>].semilogx(w,<span class="number">20</span>*np.log10(gain),**pltargs)</span><br><span class="line">    ax[<span class="number">1</span>].semilogx(w,phase*<span class="number">180</span>/np.pi,**pltargs)</span><br><span class="line">bodeplot_set(ax,<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>


<p><img src="/2023/01/31/control%20system/close-sys1/close_sys_15_0.png" alt="png"><br>​    </p>
<p>这里$k_D$等于0的相位有点问题,但是我就懒得调了,可以看出,随着$k_D$的增大,通频带会逐渐增大,且过冲会减小,但是稳态条件下并没有改善  </p>
<blockquote>
<p>PD控制的可实现性<br>我们需要注意到PD控制的传递函数是非真分的,即控制过程中会用到系统未来的信息,因此我们需要使用<strong>不完全微分</strong><br>$$\frac{s}{1+T_{lp}s}$$<br>这是将低通滤波(一阶滞后系统)叠加到微分后的结果,是真分的函数(即添加一个对输出求导的函数)</p>
</blockquote>
<h3 id="PID控制-1"><a href="#PID控制-1" class="headerlink" title="PID控制"></a>PID控制</h3><p>最后,我们为了改善稳态的特性,我们可以添加I控制可以让稳态误差为0,同时,我们也可以注意到,随着$k_I$增大,振荡也会增强</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kp=<span class="number">2</span></span><br><span class="line">kd=<span class="number">0.1</span></span><br><span class="line">ki=(<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">ls=line_generator()</span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    k=tf([kd,kp,ki[i]],[<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">    gyr=feedback(P*k,<span class="number">1</span>)</span><br><span class="line">    y,t=step(gyr,np.arange(<span class="number">0</span>,<span class="number">2</span>,<span class="number">0.01</span>))</span><br><span class="line">    pltargs=&#123;<span class="string">&#x27;ls&#x27;</span>:<span class="built_in">next</span>(ls),<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;$k_I$=&#x27;</span>+<span class="built_in">str</span>(ki[i])&#125;</span><br><span class="line">    ax.plot(t,y*ref,**pltargs)</span><br><span class="line">ax.axhline(ref,color=<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">plot_set(ax,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;best&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p><img src="/2023/01/31/control%20system/close-sys1/close_sys_18_0.png" alt="png"><br>​    </p>
<p>接下来,我们来观察一下PID控制的伯德图  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls=line_generator()</span><br><span class="line">fig,ax=plt.subplots(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    k=tf([kd,kp,ki[i]],[<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">    gyr=feedback(P*k,<span class="number">1</span>)</span><br><span class="line">    gain,phase,w=bode(gyr,logspace(-<span class="number">1</span>,<span class="number">2</span>),plot=<span class="literal">False</span>)</span><br><span class="line">    pltargs=&#123;<span class="string">&#x27;ls&#x27;</span>:<span class="built_in">next</span>(ls),<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;$k_I$=&#x27;</span>+<span class="built_in">str</span>(ki[i])&#125;</span><br><span class="line">    ax[<span class="number">0</span>].semilogx(w,<span class="number">20</span>*np.log10(gain),**pltargs)</span><br><span class="line">    ax[<span class="number">1</span>].semilogx(w,phase*<span class="number">180</span>/np.pi,**pltargs)</span><br><span class="line">bodeplot_set(ax,<span class="string">&#x27;best&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p><img src="/2023/01/31/control%20system/close-sys1/close_sys_20_0.png" alt="png"><br>​    </p>
<p>我们可以注意到,随着$k_I$的增大,振荡会增大,但是其他性质近似能够保持不变</p>
<blockquote>
<p>我们还可以来研究一下抗干扰性<br>因为可能会从d出现输入(扰动),下面展示了当d为阶跃输入时的系统整体的变化<br>这些扰动在机械系统中往往是一些摩擦等因素</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls=line_generator()</span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    k=tf([kd,kp,ki[i]],[<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">    gyd=feedback(P,k)<span class="comment">#注意这里反馈环的变化</span></span><br><span class="line">    y,t=step(gyd,np.arange(<span class="number">0</span>,<span class="number">2</span>,<span class="number">0.01</span>))</span><br><span class="line">    pltargs=&#123;<span class="string">&#x27;ls&#x27;</span>:<span class="built_in">next</span>(ls),<span class="string">&#x27;label&#x27;</span>:<span class="string">&#x27;$k_I$=&#x27;</span>+<span class="built_in">str</span>(ki[i])&#125;</span><br><span class="line">    ax.plot(t,y,**pltargs)</span><br><span class="line">plot_set(ax,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;best&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p><img src="/2023/01/31/control%20system/close-sys1/close_sys_22_0.png" alt="png"><br>​    </p>
<p>可以注意到,虽然有振荡,但是I控制最终总是能够拉回</p>
<blockquote>
<p>PID数学形式<br>闭环系统:<br>$$\frac{k_Ds^2+k_Ps+k_I}{Js^3+(\mu +k_D)s^2+(mgl+k_P)s+k_I}$$<br>当频率为0(稳态时),闭环系统为1<br>扰动:<br>$$\frac{s}{Js^3+(\mu +k_D)s^2+(mgl+k_P)s+k_I}$$<br>当频率为0(稳态扰动时),扰动影响为0</p>
</blockquote>
<h2 id="二自由度控制"><a href="#二自由度控制" class="headerlink" title="二自由度控制"></a>二自由度控制</h2><p>但是在实际的使用过程中,我们往往使用的是PID控制的改良版本,我们下面介绍改良版的PID控制以及其与<strong>二自由度控制</strong>之间的关系.<br>在PID控制中如果目标值以阶跃状变化时控制输入($u(t)$)就会出现微分器中包含的冲激成分(虽然这个值不会像理论计算那样是无穷大,但是也会非常大).因此我们有时会将微分器移动到输出(这样不会直接输入)的<strong>PI-D控制</strong>,可以用下式表示<br>$$u(s)&#x3D;k_Pe(s)+\frac{k_I}{s}e(s)-k_Dsy(s)$$<br>其控制框图如图所示:<br><img src="/image-20230131204356341.png" alt="image-20230131204356341">而对于P控制,输入中也存在有阶跃状的信号,而为了解决这个问题,我们也可以将P也放到输出端,那么可以用下式表述:<br>$$u(s)&#x3D;-k_Py(s)+\frac{k_I}{s}e(s)-k_Dsy(s)$$<br>PI-D控制和P-ID控制就是在反馈控制基础上叠加了顺馈控制的二自由度控制,下面对其加以介绍:<br>对于PI-D控制,我们可以通过计算其输入$u(s)$为:<br>$$u(s)&#x3D;\frac{k_Ds^2+k_Ps+K_I}{s}\left(\frac{k_Ps+k_I}{k_Ds^2+k_Ps+k_I}r(s)-y(s)\right)&#x3D;\mathcal{K}_1(s)(\mathcal{K}_2(s)r(s)-y(s))$$<br>可以看作是两个控制器$\mathcal{K}_1$就是普通的PID控制,而$\mathcal{K}_2$则为一个滤波器,可以将输入信号变得平滑<br>相似的,对于P-ID控制,形式与前相同,只是$\mathcal{K}_2$变成了<br>$$\mathcal{K}_2(s)&#x3D;\frac{k_I}{k_Ds^2+k_Ps+k_I}$$<br>我们可以看看PID控制与PI-D控制以及I-PD控制之间区别</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kp,ki,kd=<span class="number">2</span>,<span class="number">5</span>,<span class="number">0.1</span></span><br><span class="line">pcontrol=tf([<span class="number">0</span>,kp],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">icontrol=tf([<span class="number">0</span>,ki],[<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">dcontrol=tf([kd,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#首先看看PID控制</span></span><br><span class="line">pid=parallel(pcontrol,icontrol,dcontrol)</span><br><span class="line">fb=feedback(pid*P,<span class="number">1</span>)</span><br><span class="line">pidout,t=step(fb,np.arange(<span class="number">0</span>,<span class="number">3</span>,<span class="number">0.01</span>))</span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line">ax.plot(t,pidout,<span class="string">&#x27;r-&#x27;</span>,label=<span class="string">&quot;PID&quot;</span>)</span><br><span class="line"><span class="comment">#接下来是PI_D控制</span></span><br><span class="line">pi=parallel(pcontrol,icontrol)</span><br><span class="line">Pd=feedback(P,dcontrol)</span><br><span class="line">gyd=feedback(pi*Pd,<span class="number">1</span>)</span><br><span class="line">pi_dout,t=step(gyd,np.arange(<span class="number">0</span>,<span class="number">3</span>,<span class="number">0.01</span>))</span><br><span class="line">ax.plot(t,pi_dout,<span class="string">&#x27;g-&#x27;</span>,label=<span class="string">&quot;PI-D&quot;</span>)</span><br><span class="line"><span class="comment">#最后是P_ID控制</span></span><br><span class="line">Ppd=feedback(P,parallel(pcontrol,dcontrol))</span><br><span class="line">gyd=feedback(icontrol*Ppd,<span class="number">1</span>)</span><br><span class="line">p_idout,t=step(gyd,np.arange(<span class="number">0</span>,<span class="number">3</span>,<span class="number">0.01</span>))</span><br><span class="line">ax.plot(t,p_idout,<span class="string">&#x27;b-&#x27;</span>,label=<span class="string">&quot;P-ID&quot;</span>)</span><br><span class="line"></span><br><span class="line">plot_set(ax,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2023/01/31/control%20system/close-sys1/close_sys_25_0.png" alt="png"><br>​    </p>
<p>可以注意到,使用PI-D振荡会略小,而使用P-ID振荡则几乎消失(这样可以避免u输入过大)</p>
<h2 id="使用临界比例度法进行增益调整"><a href="#使用临界比例度法进行增益调整" class="headerlink" title="使用临界比例度法进行增益调整"></a>使用临界比例度法进行增益调整</h2><p>常见有两种调节PID增益的方法,它们分别是<strong>临界比例度法</strong>和阶跃响应法,这里我们主要是研究使用临界比例度法对PID增益的调整,这种方法好处在于<strong>无需知道被控对象的模型</strong>,但是也有着相应的缺点:<strong>必须重复实验并且将机器运行在极其不稳定状态</strong><br>在使用临界比例度法时,首先搭建一个P控制,然后逐渐增大比例增益$k_P$,此时振荡也会逐渐增大<br>此时我们可以来调查比例增益$k_{P0}$和持续振荡的周期$T_0$,在实际的系统中,由于存在有微小的<strong>延迟时间</strong>,因此会产生持续振荡</p>
<p>得到了这些信息,我们就可以根据下表来确定比例增益$k_P$,<strong>积分时间常数$T_I$<strong>和</strong>微分时间常数$T_D$</strong>,对于PID控制,有:<br>$$u(t)&#x3D;k_P\left(e(t)+\frac{1}{T_I}\int e(t)dt+T_D\frac{d}{dt}e(t)\right)$$<br>则有$k_I&#x3D;\frac{k_P}{T_I}$,$k_D&#x3D;k_PT_D$  </p>
<table>
<thead>
<tr>
<th>临界比例度法</th>
<th>比例增益$k_P$</th>
<th>积分时间常数$T_I$</th>
<th>微分时间常数$T_D$</th>
</tr>
</thead>
<tbody><tr>
<td>P控制</td>
<td>0.5 $k_{P0}$</td>
<td></td>
<td></td>
</tr>
<tr>
<td>PI控制</td>
<td>0.45 $k_{P0}$</td>
<td>0.83 $T_0$</td>
<td></td>
</tr>
<tr>
<td>PID控制</td>
<td>0.6 $k_{P0}$</td>
<td>0.5 $T_0$</td>
<td>0.125 $T_0$</td>
</tr>
<tr>
<td>无过冲控制</td>
<td>0.2 $k_{P0}$</td>
<td>0.5 $T_0$</td>
<td>0.33 $T_0$</td>
</tr>
</tbody></table>
<p>下面我们假设处理的是作为被控对象的二阶滞后系统中存在有微小的延迟时间</p>
<blockquote>
<p>延迟系统可以表示为$e^{-hs}$这样的无穷维系统,可以近似为有理函数,下面使用一阶帕德近似,延迟时间设定为0.005  </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numd,dend=pade(<span class="number">0.005</span>,<span class="number">1</span>)</span><br><span class="line">Pdelay=P*tf(numd,dend)</span><br></pre></td></tr></table></figure>

<p>我们按照要求将比例增益大概调节到2.9并且施加P控制,那么就会产生下图所示的振荡</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig,ax=plt.subplots()</span><br><span class="line">kp0=<span class="number">2.9</span></span><br><span class="line">K=tf([<span class="number">0</span>,kp0],[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">gyr=feedback(Pdelay*K,<span class="number">1</span>)</span><br><span class="line">y,t=step(gyr,np.arange(<span class="number">0</span>,<span class="number">2</span>,<span class="number">0.01</span>))</span><br><span class="line"></span><br><span class="line">ax.plot(t,y)</span><br><span class="line">ax.axhline(<span class="number">1</span>)</span><br><span class="line">plot_set(ax,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p><img src="/2023/01/31/control%20system/close-sys1/close_sys_32_0.png" alt="png"><br>​    </p>
<p>可以注意到,系统已经产生了显著的振荡,我们可以读出持续振荡的周期约为0.3s,那么我们就可以用这个系统来实现PID控制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kp=[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">ki=[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">kd=[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">t0=<span class="number">0.3</span></span><br><span class="line">kp[<span class="number">0</span>]=<span class="number">0.6</span>*kp0</span><br><span class="line">ki[<span class="number">0</span>]=kp[<span class="number">0</span>]/(<span class="number">0.5</span>*t0)</span><br><span class="line">kd[<span class="number">0</span>]=kp[<span class="number">0</span>]*(<span class="number">0.125</span>*t0)</span><br><span class="line">K=tf([kd[<span class="number">0</span>],kp[<span class="number">0</span>],ki[<span class="number">0</span>]],[<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line">gyr=feedback(K*Pdelay,<span class="number">1</span>)</span><br><span class="line">y,t=step(gyr,np.arange(<span class="number">0</span>,<span class="number">2</span>,<span class="number">0.01</span>))</span><br><span class="line">ax.plot(t,y)</span><br><span class="line">plot_set(ax,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p>​<br><img src="/close_sys_files/close_sys_34_0.png" alt="png"><br>​    </p>
<p>可以看到,实现了较好的控制,我们还可以避免过冲,可以看以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kp=[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">ki=[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">kd=[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">t0=<span class="number">0.3</span></span><br><span class="line">kp[<span class="number">0</span>]=<span class="number">0.2</span>*kp0</span><br><span class="line">ki[<span class="number">0</span>]=kp[<span class="number">0</span>]/(<span class="number">0.5</span>*t0)</span><br><span class="line">kd[<span class="number">0</span>]=kp[<span class="number">0</span>]*(<span class="number">0.33</span>*t0)</span><br><span class="line">K=tf([kd[<span class="number">0</span>],kp[<span class="number">0</span>],ki[<span class="number">0</span>]],[<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">fig,ax=plt.subplots()</span><br><span class="line">gyr=feedback(K*Pdelay,<span class="number">1</span>)</span><br><span class="line">y,t=step(gyr,np.arange(<span class="number">0</span>,<span class="number">2</span>,<span class="number">0.01</span>))</span><br><span class="line">ax.plot(t,y)</span><br><span class="line">plot_set(ax,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p><img src="/2023/01/31/control%20system/close-sys1/close_sys_36_0.png" alt="png"><br>​    </p>
]]></content>
      <categories>
        <category>Python设计控制系统</category>
      </categories>
      <tags>
        <tag>控制系统</tag>
      </tags>
  </entry>
</search>
